#!/usr/bin/env python

import unittest
from gpmj import gpmjcore

class TestGpmj(unittest.TestCase):

    all_tiles = [[], [], [], [], []]
    required = None
    hand = None

    # Simples
    for suit in range(gpmjcore.Suits.NUM_OF_SIMPLES):
        for number in range(1, 10):
            for i in range(4):
                all_tiles[suit].append(gpmjcore.Tile(suit, number))
    # Winds
    for number in range(gpmjcore.Winds.NUM_OF_WINDS):
        for i in range(4):
            all_tiles[gpmjcore.Suits.WINDS].append(gpmjcore.Tile(gpmjcore.Suits.WINDS, number))
    # Dragons
    for number in range(gpmjcore.Dragons.NUM_OF_DRAGONS):
        for i in range(4):
            all_tiles[gpmjcore.Suits.DRAGONS].append(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, number))

    # HandJudge(Chains)
    basic_hand_j = gpmjcore.HandJudge()
    basic_hand_jc = gpmjcore.HandJudgeChain(basic_hand_j)
    basic_limit_hand_jc = gpmjcore.HandJudgeChain(basic_hand_j)
    # ValuedDragon(s)
    white_dragon_j = gpmjcore.ValuedDragonJudge(gpmjcore.HandFlag.WHITE_DRAGON, \
                                                 gpmjcore.Dragons.WHITE)
    white_dragon_jc = gpmjcore.HandJudgeChain(white_dragon_j)
    green_dragon_j = gpmjcore.ValuedDragonJudge(gpmjcore.HandFlag.GREEN_DRAGON, \
                                                 gpmjcore.Dragons.GREEN)
    green_dragon_jc = gpmjcore.HandJudgeChain(green_dragon_j)
    red_dragon_j = gpmjcore.ValuedDragonJudge(gpmjcore.HandFlag.RED_DRAGON, \
                                               gpmjcore.Dragons.RED)
    red_dragon_jc = gpmjcore.HandJudgeChain(red_dragon_j)
    # SeatWind
    seat_wind_j = gpmjcore.SeatWindJudge()
    seat_wind_jc = gpmjcore.HandJudgeChain(seat_wind_j)
    # RoundWind
    round_wind_j = gpmjcore.RoundWindJudge()
    round_wind_jc = gpmjcore.HandJudgeChain(round_wind_j)
    # NoPointsHand
    no_points_hand_j = gpmjcore.NoPointsHandJudge()
    no_points_hand_jc = gpmjcore.HandJudgeChain(no_points_hand_j)
    # OneSetOfIdenticalSequences
    one_set_of_identical_sequences_j = gpmjcore.OneSetOfIdenticalSequencesJudge()
    one_set_of_identical_sequences_jc = gpmjcore.HandJudgeChain(one_set_of_identical_sequences_j)
    # AllSimples
    all_simples_j = gpmjcore.AllSimplesJudge()
    all_simples_jc = gpmjcore.HandJudgeChain(all_simples_j)
    all_simples_7p_jc = gpmjcore.HandJudgeChain(all_simples_j)
    # ThreeColorStraight
    three_color_straight_j = gpmjcore.ThreeColorStraightJudge()
    three_color_straight_jc = gpmjcore.HandJudgeChain(three_color_straight_j)
    # Straight
    straight_j = gpmjcore.StraightJudge()
    straight_jc = gpmjcore.HandJudgeChain(straight_j)
    # TerminalOrHonorInEachSet
    terminal_or_honor_in_each_set_j = gpmjcore.TerminalOrHonorInEachSetJudge()
    terminal_or_honor_in_each_set_jc = gpmjcore.HandJudgeChain(terminal_or_honor_in_each_set_j)
    # SevenPairs
    seven_pairs_j = gpmjcore.SevenPairsJudge()
    seven_pairs_7p_jc = gpmjcore.HandJudgeChain(seven_pairs_j)
    seven_pairs_limit_7p_jc = gpmjcore.HandJudgeChain(seven_pairs_j)
    # AllTripletHand
    all_triplet_hand_j = gpmjcore.AllTripletHandJudge()
    all_triplet_hand_jc = gpmjcore.HandJudgeChain(all_triplet_hand_j)
    # ThreeClosedTriplets
    three_closed_triplets_j = gpmjcore.ThreeClosedTripletsJudge()
    three_closed_triplets_jc = gpmjcore.HandJudgeChain(three_closed_triplets_j)
    # ThreeColorTriplets
    three_color_triplets_j = gpmjcore.ThreeColorTripletsJudge()
    three_color_triplets_jc = gpmjcore.HandJudgeChain(three_color_triplets_j)
    # ThreeKongs
    three_kongs_j = gpmjcore.ThreeKongsJudge()
    three_kongs_jc = gpmjcore.HandJudgeChain(three_kongs_j)
    # AllTerminalsAndHonors
    all_terminals_and_honors_j = gpmjcore.AllTerminalsAndHonorsJudge()
    all_terminals_and_honors_jc = gpmjcore.HandJudgeChain(all_terminals_and_honors_j)
    all_terminals_and_honors_7p_jc = gpmjcore.HandJudgeChain(all_terminals_and_honors_j)
    # LittleThreeDragons 
    little_three_dragons_j = gpmjcore.LittleThreeDragonsJudge()
    little_three_dragons_jc = gpmjcore.HandJudgeChain(little_three_dragons_j)
    # TerminalInEachSet
    terminal_in_each_set_j = gpmjcore.TerminalInEachSetJudge()
    terminal_in_each_set_jc = gpmjcore.HandJudgeChain(terminal_in_each_set_j)
    # HalfFlush
    half_flush_j = gpmjcore.HalfFlushJudge()
    half_flush_jc = gpmjcore.HandJudgeChain(half_flush_j)
    half_flush_7p_jc = gpmjcore.HandJudgeChain(half_flush_j)
    # TwoSetOfIdenticalSequences
    two_set_of_identical_sequences_j = gpmjcore.TwoSetOfIdenticalSequencesJudge()
    two_set_of_identical_sequences_jc = gpmjcore.HandJudgeChain(two_set_of_identical_sequences_j)
    # Flush
    flush_j = gpmjcore.FlushJudge()
    flush_jc = gpmjcore.HandJudgeChain(flush_j)
    flush_7p_jc = gpmjcore.HandJudgeChain(flush_j)
    # FourConcealedTriplets
    four_concealed_triplets_j = gpmjcore.FourConcealedTripletsJudge()
    four_concealed_triplets_jc = gpmjcore.HandJudgeChain(four_concealed_triplets_j)
    # BigThreeDragons
    big_three_dragons_j = gpmjcore.BigThreeDragonsJudge()
    big_three_dragons_jc = gpmjcore.HandJudgeChain(big_three_dragons_j)
    # LittleFourWinds
    little_four_winds_j = gpmjcore.LittleFourWindsJudge()
    little_four_winds_jc = gpmjcore.HandJudgeChain(little_four_winds_j)
    # BigFourWinds
    big_four_winds_j = gpmjcore.BigFourWindsJudge()
    big_four_winds_jc = gpmjcore.HandJudgeChain(big_four_winds_j)
    # AllHonors
    all_honors_j = gpmjcore.AllHonorsJudge()
    all_honors_jc = gpmjcore.HandJudgeChain(all_honors_j)
    all_honors_7p_jc = gpmjcore.HandJudgeChain(all_honors_j)
    # AllTerminals
    all_terminals_j = gpmjcore.AllTerminalsJudge()
    all_terminals_jc = gpmjcore.HandJudgeChain(all_terminals_j)
    # AllGreen
    all_green_j = gpmjcore.AllGreenJudge()
    all_green_jc = gpmjcore.HandJudgeChain(all_green_j)
    # NineGates
    nine_gates_j = gpmjcore.NineGatesJudge()
    nine_gates_jc = gpmjcore.HandJudgeChain(nine_gates_j)
    # FourKongs
    four_kongs_j = gpmjcore.FourKongsJudge()
    four_kongs_jc = gpmjcore.HandJudgeChain(four_kongs_j)
    # ThirteenOrphans
    thirteen_orphans_j = gpmjcore.ThirteenOrphansJudge()

    # connect basic limit hand judge chains
    basic_limit_hand_jc.connect_chain(nine_gates_jc, None)
    nine_gates_jc.connect_chain(None, all_honors_jc)
    all_honors_jc.connect_chain(big_three_dragons_jc, big_three_dragons_jc)
    big_three_dragons_jc.connect_chain(four_concealed_triplets_jc, big_four_winds_jc)
    big_four_winds_jc.connect_chain(four_concealed_triplets_jc, little_four_winds_jc)
    little_four_winds_jc.connect_chain(four_concealed_triplets_jc, all_green_jc)
    all_green_jc.connect_chain(four_concealed_triplets_jc, all_terminals_jc)
    all_terminals_jc.connect_chain(four_concealed_triplets_jc, four_concealed_triplets_jc)
    four_concealed_triplets_jc.connect_chain(four_kongs_jc, four_kongs_jc)
    four_kongs_jc.connect_chain(None, None)

    # connect basic hand judge chains
    basic_hand_jc.connect_chain(all_simples_jc, None)
    all_simples_jc.connect_chain(no_points_hand_jc, white_dragon_jc)
    white_dragon_jc.connect_chain(green_dragon_jc, green_dragon_jc)
    green_dragon_jc.connect_chain(red_dragon_jc, red_dragon_jc)
    red_dragon_jc.connect_chain(seat_wind_jc, seat_wind_jc)
    seat_wind_jc.connect_chain(round_wind_jc, round_wind_jc)
    round_wind_jc.connect_chain(little_three_dragons_jc, terminal_in_each_set_jc)
    terminal_in_each_set_jc.connect_chain(no_points_hand_jc, little_three_dragons_jc)
    little_three_dragons_jc.connect_chain(half_flush_jc, half_flush_jc)
    half_flush_jc.connect_chain(terminal_or_honor_in_each_set_jc, terminal_or_honor_in_each_set_jc)
    terminal_or_honor_in_each_set_jc.connect_chain(no_points_hand_jc, straight_jc)
    straight_jc.connect_chain(no_points_hand_jc, all_terminals_and_honors_jc)
    all_terminals_and_honors_jc.connect_chain(three_kongs_jc, no_points_hand_jc)
    no_points_hand_jc.connect_chain(two_set_of_identical_sequences_jc, three_kongs_jc)
    three_kongs_jc.connect_chain(three_closed_triplets_jc, three_closed_triplets_jc)
    three_closed_triplets_jc.connect_chain(three_color_triplets_jc, three_color_triplets_jc)
    three_color_triplets_jc.connect_chain(all_triplet_hand_jc, all_triplet_hand_jc)
    all_triplet_hand_jc.connect_chain(flush_jc, two_set_of_identical_sequences_jc)
    two_set_of_identical_sequences_jc.connect_chain(flush_jc, one_set_of_identical_sequences_jc)
    one_set_of_identical_sequences_jc.connect_chain(three_color_straight_jc, three_color_straight_jc)
    three_color_straight_jc.connect_chain(None, flush_jc)
    flush_jc.connect_chain(None, None)

    # connect 7 pairs limit hand judge chains
    seven_pairs_limit_7p_jc.connect_chain(all_honors_7p_jc, None)
    all_honors_7p_jc.connect_chain(None, None)

    # connect 7 pairs hand judge chains
    seven_pairs_7p_jc.connect_chain(all_simples_7p_jc, None)
    all_simples_7p_jc.connect_chain(None, flush_7p_jc)
    flush_7p_jc.connect_chain(None, half_flush_7p_jc)
    half_flush_7p_jc.connect_chain(all_terminals_and_honors_7p_jc, all_terminals_and_honors_7p_jc)
    all_terminals_and_honors_7p_jc.connect_chain(None, None)

# Simplified chart:
# Simples >
# ------------------------------------------------------+
# Index   0| 1| 2| 3| 4| 5| 6| 7| 8| 9|10|11|12|13|14|15|
# Number  1| 1| 1| 1| 2| 2| 2| 2| 3| 3| 3| 3| 4| 4| 4| 4| 
# ------------------------------------------------------+
# Index  16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31|
# Number  5| 5| 5| 5| 6| 6| 6| 6| 7| 7| 7| 7| 8| 8| 8| 8| 
# ------------------------------------------------------+
# Index  32|33|34|35|
# Number  9| 9| 9| 9| 
# ------------------+
# Winds >
# ------------------------------------------------------+
# Index   0| 1| 2| 3| 4| 5| 6| 7| 8| 9|10|11|12|13|14|15|
# Number Es|Es|Es|Es|St|St|St|St|Ws|Ws|Ws|Ws|Nt|Nt|Nt|Nt| 
# ------------------------------------------------------+
# Dragons >
# ------------------------------------------+
# Index   0| 1| 2| 3| 4| 5| 6| 7| 8| 9|10|11|
# Number Wh|Wh|Wh|Wh|Gr|Gr|Gr|Gr|Rd|Rd|Rd|Rd| 
# ------------------------------------------+

    def setUp(self):
        self.hand = gpmjcore.Hand()

    def tearDown(self):
        self.hand = None
        self.required = None

    def test_calc_score_dealer_v1_p30_pick(self):
        win_hand = gpmjcore.WinHand(None, False, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.hand_value = 1
        win_hand.hand_point = 30
        pay_non_dealer, _ = win_hand.calc_score()
        self.assertEqual(pay_non_dealer, 500)

    def test_calc_score_dealer_v2_p30_steal(self):
        win_hand = gpmjcore.WinHand(None, True, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.hand_value = 2
        win_hand.hand_point = 30
        pay_non_dealer, _ = win_hand.calc_score()
        self.assertEqual(pay_non_dealer, 2900)

    def test_Limit7PairsHandJudgeChain_0(self):
        # [Es][Es][St][St][Ws][Ws][Nt][Nt][Wh][Gr][Gr][Rd][Rd] + [Wh]
        eyes = []
        eye1 = gpmjcore.Eye()
        eye1.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][0])
        eye1.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][1])
        eyes.append(eye1)
        eye2 = gpmjcore.Eye()
        eye2.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][4])
        eye2.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][5])
        eyes.append(eye2)
        eye3 = gpmjcore.Eye()
        eye3.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][8])
        eye3.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][9])
        eyes.append(eye3)
        eye4 = gpmjcore.Eye()
        eye4.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][12])
        eye4.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][13])
        eyes.append(eye4)
        eye5 = gpmjcore.Eye()
        eye5.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][0])
        last_tile = self.all_tiles[gpmjcore.Suits.DRAGONS][1]
        eye5.add_tile(last_tile)
        eyes.append(eye5)
        eye6 = gpmjcore.Eye()
        eye6.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][4])
        eye6.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][5])
        eyes.append(eye6)
        eye7 = gpmjcore.Eye()
        eye7.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][8])
        eye7.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][9])
        eyes.append(eye7)
        expected = (gpmjcore.HandFlag.SEVEN_PAIRS | \
                    gpmjcore.HandFlag.ALL_HONORS)
        win_hand = gpmjcore.WinHand(last_tile, False, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_eye(eye1)
        win_hand.append_eye(eye2)
        win_hand.append_eye(eye3)
        win_hand.append_eye(eye4)
        win_hand.append_eye(eye5)
        win_hand.append_eye(eye6)
        win_hand.append_eye(eye7)
        self.seven_pairs_limit_7p_jc.judge_chain(win_hand)
        self.assertEqual(win_hand.hand_flag, expected)
        win_hand.calc_points()
        self.assertEqual(win_hand.hand_point, 25)
        self.assertEqual(win_hand.hand_value, 15)

    def test_7PairsHandJudgeChain_0(self):
        # [B2][B2][B4][B4][B5][B5][B6][B6][C2][C2][C4][C4][C5] + [C5]
        eyes = []
        eye1 = gpmjcore.Eye()
        eye1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][4])
        eye1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][5])
        eyes.append(eye1)
        eye2 = gpmjcore.Eye()
        eye2.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][12])
        eye2.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][13])
        eyes.append(eye2)
        eye3 = gpmjcore.Eye()
        eye3.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][16])
        eye3.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][17])
        eyes.append(eye3)
        eye4 = gpmjcore.Eye()
        eye4.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][20])
        eye4.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][21])
        eyes.append(eye4)
        eye5 = gpmjcore.Eye()
        eye5.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][4])
        eye5.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][5])
        eyes.append(eye5)
        eye6 = gpmjcore.Eye()
        eye6.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][12])
        eye6.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][13])
        eyes.append(eye6)
        eye7 = gpmjcore.Eye()
        eye7.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][16])
        last_tile = self.all_tiles[gpmjcore.Suits.CHARACTERS][17]
        eye7.add_tile(last_tile)
        eyes.append(eye7)
        expected = (gpmjcore.HandFlag.SEVEN_PAIRS | \
                    gpmjcore.HandFlag.ALL_SIMPLES)
        win_hand = gpmjcore.WinHand(last_tile, False, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_eye(eye1)
        win_hand.append_eye(eye2)
        win_hand.append_eye(eye3)
        win_hand.append_eye(eye4)
        win_hand.append_eye(eye5)
        win_hand.append_eye(eye6)
        win_hand.append_eye(eye7)
        self.seven_pairs_7p_jc.judge_chain(win_hand)
        self.assertEqual(win_hand.hand_flag, expected)
        win_hand.calc_points()
        self.assertEqual(win_hand.hand_point, 25)
        self.assertEqual(win_hand.hand_value, 3)

    def test_7PairsHandJudgeChain_1(self):
        # [B1][B1][B2][B2][B4][B4][B5][B5][B6][B6][B7][B7][B9] + [B9]
        eyes = []
        eye1 = gpmjcore.Eye()
        eye1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][4])
        eye1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][5])
        eyes.append(eye1)
        eye2 = gpmjcore.Eye()
        eye2.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][12])
        eye2.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][13])
        eyes.append(eye2)
        eye3 = gpmjcore.Eye()
        eye3.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][16])
        eye3.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][17])
        eyes.append(eye3)
        eye4 = gpmjcore.Eye()
        eye4.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][20])
        eye4.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][21])
        eyes.append(eye4)
        eye5 = gpmjcore.Eye()
        eye5.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][0])
        eye5.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][1])
        eyes.append(eye5)
        eye6 = gpmjcore.Eye()
        eye6.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][24])
        eye6.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][25])
        eyes.append(eye6)
        eye7 = gpmjcore.Eye()
        eye7.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][32])
        last_tile = self.all_tiles[gpmjcore.Suits.BAMBOO][33]
        eye7.add_tile(last_tile)
        eyes.append(eye7)
        expected = (gpmjcore.HandFlag.SEVEN_PAIRS | \
                    gpmjcore.HandFlag.FLUSH)
        win_hand = gpmjcore.WinHand(last_tile, False, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_eye(eye1)
        win_hand.append_eye(eye2)
        win_hand.append_eye(eye3)
        win_hand.append_eye(eye4)
        win_hand.append_eye(eye5)
        win_hand.append_eye(eye6)
        win_hand.append_eye(eye7)
        self.seven_pairs_7p_jc.judge_chain(win_hand)
        self.assertEqual(win_hand.hand_flag, expected)
        win_hand.calc_points()
        self.assertEqual(win_hand.hand_point, 25)
        self.assertEqual(win_hand.hand_value, 8)

    def test_7PairsHandJudgeChain_2(self):
        # [B1][B1][B9][B9][Es][Es][St][St][Ws][Ws][Nt][Nt][Wh] + [Wh]
        eyes = []
        eye1 = gpmjcore.Eye()
        eye1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][0])
        eye1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][1])
        eyes.append(eye1)
        eye2 = gpmjcore.Eye()
        eye2.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][32])
        eye2.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][33])
        eyes.append(eye2)
        eye3 = gpmjcore.Eye()
        eye3.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][0])
        eye3.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][1])
        eyes.append(eye3)
        eye4 = gpmjcore.Eye()
        eye4.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][4])
        eye4.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][5])
        eyes.append(eye4)
        eye5 = gpmjcore.Eye()
        eye5.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][8])
        eye5.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][9])
        eyes.append(eye5)
        eye6 = gpmjcore.Eye()
        eye6.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][12])
        eye6.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][13])
        eyes.append(eye6)
        eye7 = gpmjcore.Eye()
        eye7.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][0])
        last_tile = self.all_tiles[gpmjcore.Suits.DRAGONS][1]
        eye7.add_tile(last_tile)
        eyes.append(eye7)
        expected = (gpmjcore.HandFlag.SEVEN_PAIRS | \
                    gpmjcore.HandFlag.ALL_TERMINALS_AND_HONORS | \
                    gpmjcore.HandFlag.HALF_FLUSH)
        win_hand = gpmjcore.WinHand(last_tile, False, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_eye(eye1)
        win_hand.append_eye(eye2)
        win_hand.append_eye(eye3)
        win_hand.append_eye(eye4)
        win_hand.append_eye(eye5)
        win_hand.append_eye(eye6)
        win_hand.append_eye(eye7)
        self.seven_pairs_7p_jc.judge_chain(win_hand)
        self.assertEqual(win_hand.hand_flag, expected)
        win_hand.calc_points()
        self.assertEqual(win_hand.hand_point, 25)
        self.assertEqual(win_hand.hand_value, 7)

    def test_LimitHandJudgeChain_0(self):
        # [C1][C1][C1][C2][C3][C4][C4][C5][C6][C7][C8][C9][C9] + [C9]
        last_tile = self.all_tiles[gpmjcore.Suits.CHARACTERS][34]
        melds = []
        meld1 = gpmjcore.Meld()
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][0])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][1])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][2])
        melds.append(meld1)
        meld2 = gpmjcore.Meld()
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][4])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][8])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][13])
        melds.append(meld2)
        meld3 = gpmjcore.Meld()
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][12])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][16])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][20])
        melds.append(meld3)
        meld4 = gpmjcore.Meld()
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][24])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][28])
        meld4.add_tile(last_tile)
        melds.append(meld4)
        eye = gpmjcore.Eye()
        eye.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][32])
        eye.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][33])
        expected = gpmjcore.HandFlag.NINE_GATES
        win_hand = gpmjcore.WinHand(last_tile, False, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_meld(meld1)
        win_hand.append_meld(meld2)
        win_hand.append_meld(meld3)
        win_hand.append_meld(meld4)
        win_hand.append_eye(eye)
        self.basic_limit_hand_jc.judge_chain(win_hand)
        self.assertEqual(win_hand.hand_flag, expected)
        win_hand.calc_points()
        self.assertEqual(win_hand.hand_point, 30)
        self.assertEqual(win_hand.hand_value, 13)

    def test_LimitHandJudgeChain_1(self):
        # [Wh][Wh][Wh][Gr][Gr][Gr][Rd][Rd][Rd][Es][Es][St][St] + [St]
        last_tile = self.all_tiles[gpmjcore.Suits.WINDS][4]
        melds = []
        meld1 = gpmjcore.Meld()
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][0])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][1])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][2])
        melds.append(meld1)
        meld2 = gpmjcore.Meld()
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][4])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][5])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][6])
        melds.append(meld2)
        meld3 = gpmjcore.Meld()
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][8])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][9])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][10])
        melds.append(meld3)
        meld4 = gpmjcore.Meld()
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][6])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][5])
        meld4.add_tile(last_tile)
        melds.append(meld4)
        eye = gpmjcore.Eye()
        eye.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][0])
        eye.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][1])
        expected = (gpmjcore.HandFlag.BIG_THREE_DRAGONS | \
                    gpmjcore.HandFlag.FOUR_CONCEALED_TRIPLETS | \
                    gpmjcore.HandFlag.ALL_HONORS)
        win_hand = gpmjcore.WinHand(last_tile, False, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_meld(meld1)
        win_hand.append_meld(meld2)
        win_hand.append_meld(meld3)
        win_hand.append_meld(meld4)
        win_hand.append_eye(eye)
        self.basic_limit_hand_jc.judge_chain(win_hand)
        self.assertEqual(win_hand.hand_flag, expected)
        win_hand.calc_points()
        self.assertEqual(win_hand.hand_point, 60)
        self.assertEqual(win_hand.hand_value, 39)

    def test_LimitHandJudgeChain_2(self):
        # [Es][Es][Es][St][St][St][Ws][Ws][Ws][Nt][Nt][B2][B3] + [B4]
        last_tile = self.all_tiles[gpmjcore.Suits.BAMBOO][12]
        melds = []
        meld1 = gpmjcore.Meld()
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][0])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][1])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][2])
        melds.append(meld1)
        meld2 = gpmjcore.Meld()
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][4])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][5])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][6])
        melds.append(meld2)
        meld3 = gpmjcore.Meld()
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][8])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][9])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][10])
        melds.append(meld3)
        meld4 = gpmjcore.Meld()
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][4])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][8])
        meld4.add_tile(last_tile)
        melds.append(meld4)
        eye = gpmjcore.Eye()
        eye.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][12])
        eye.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][13])
        expected = gpmjcore.HandFlag.LITTLE_FOUR_WINDS
        win_hand = gpmjcore.WinHand(last_tile, False, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_meld(meld1)
        win_hand.append_meld(meld2)
        win_hand.append_meld(meld3)
        win_hand.append_meld(meld4)
        win_hand.append_eye(eye)
        self.basic_limit_hand_jc.judge_chain(win_hand)
        self.assertEqual(win_hand.hand_flag, expected)
        win_hand.calc_points()
        self.assertEqual(win_hand.hand_point, 50)
        self.assertEqual(win_hand.hand_value, 13)

    def test_LimitHandJudgeChain_3(self):
        # [Es][Es][Es][Es][St][St][St][St][Ws][Ws][Ws][Ws][Nt][Nt][Nt][Nt][Rd] + [Rd]
        last_tile = self.all_tiles[gpmjcore.Suits.DRAGONS][9]
        melds = []
        meld1 = gpmjcore.Meld()
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][0])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][1])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][2])
        meld1.make_kong(self.all_tiles[gpmjcore.Suits.WINDS][3])
        melds.append(meld1)
        meld2 = gpmjcore.Meld()
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][4])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][5])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][6])
        meld2.make_kong(self.all_tiles[gpmjcore.Suits.WINDS][7])
        melds.append(meld2)
        meld3 = gpmjcore.Meld()
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][8])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][9])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][10])
        meld3.make_kong(self.all_tiles[gpmjcore.Suits.WINDS][11])
        melds.append(meld3)
        meld4 = gpmjcore.Meld()
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][12])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][13])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][14])
        meld4.make_kong(self.all_tiles[gpmjcore.Suits.WINDS][15])
        melds.append(meld4)
        eye = gpmjcore.Eye()
        eye.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][8])
        eye.add_tile(last_tile)
        expected = (gpmjcore.HandFlag.BIG_FOUR_WINDS | \
                    gpmjcore.HandFlag.FOUR_CONCEALED_TRIPLETS | \
                    gpmjcore.HandFlag.FOUR_KONGS | \
                    gpmjcore.HandFlag.ALL_HONORS)
        win_hand = gpmjcore.WinHand(last_tile, False, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_meld(meld1)
        win_hand.append_meld(meld2)
        win_hand.append_meld(meld3)
        win_hand.append_meld(meld4)
        win_hand.append_eye(eye)
        self.basic_limit_hand_jc.judge_chain(win_hand)
        self.assertEqual(win_hand.hand_flag, expected)
        win_hand.calc_points()
        self.assertEqual(win_hand.hand_point, 160)
        self.assertEqual(win_hand.hand_value, 52)

    def test_LimitHandJudgeChain_4(self):
        # [B2][B2][B3][B3][B4][B4][B6][B6][B8][B8][B8][Gr][Gr] + [Gr]
        last_tile = self.all_tiles[gpmjcore.Suits.DRAGONS][4]
        melds = []
        meld1 = gpmjcore.Meld()
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][29])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][30])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][28])
        melds.append(meld1)
        meld2 = gpmjcore.Meld()
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][12])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][4])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][8])
        melds.append(meld2)
        meld3 = gpmjcore.Meld()
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][13])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][5])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][9])
        meld3.b_stolen = True
        melds.append(meld3)
        meld4 = gpmjcore.Meld()
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][5])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][6])
        meld4.add_tile(last_tile)
        melds.append(meld4)
        eye = gpmjcore.Eye()
        eye.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][20])
        eye.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][21])
        expected = gpmjcore.HandFlag.ALL_GREEN
        win_hand = gpmjcore.WinHand(last_tile, False, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_meld(meld1)
        win_hand.append_meld(meld2)
        win_hand.append_meld(meld3)
        win_hand.append_meld(meld4)
        win_hand.append_eye(eye)
        self.basic_limit_hand_jc.judge_chain(win_hand)
        self.assertEqual(win_hand.hand_flag, expected)
        win_hand.calc_points()
        self.assertEqual(win_hand.hand_point, 40)
        self.assertEqual(win_hand.hand_value, 13)

    def test_LimitHandJudgeChain_5(self):
        # [B1][B1][B9][B9][B9][D1][D1][D1][D9][D9][D9][C1][C1] + [C1]
        last_tile = self.all_tiles[gpmjcore.Suits.CHARACTERS][2]
        melds = []
        meld1 = gpmjcore.Meld()
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][32])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][33])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][34])
        melds.append(meld1)
        meld2 = gpmjcore.Meld()
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][0])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][1])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][2])
        melds.append(meld2)
        meld3 = gpmjcore.Meld()
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][32])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][33])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][34])
        melds.append(meld3)
        meld4 = gpmjcore.Meld()
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][1])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][0])
        meld4.add_tile(last_tile)
        melds.append(meld4)
        eye = gpmjcore.Eye()
        eye.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][0])
        eye.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][1])
        expected = (gpmjcore.HandFlag.FOUR_CONCEALED_TRIPLETS | \
                    gpmjcore.HandFlag.ALL_TERMINALS)
        win_hand = gpmjcore.WinHand(last_tile, False, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_meld(meld1)
        win_hand.append_meld(meld2)
        win_hand.append_meld(meld3)
        win_hand.append_meld(meld4)
        win_hand.append_eye(eye)
        self.basic_limit_hand_jc.judge_chain(win_hand)
        self.assertEqual(win_hand.hand_flag, expected)
        win_hand.calc_points()
        self.assertEqual(win_hand.hand_point, 60)
        self.assertEqual(win_hand.hand_value, 26)

    def test_HandJudgeChain_0(self):
        # [D4][D4][D5][D5][D6][D6][B2][B3][B4][C4][C5][C6][C6] + [C6]
        last_tile = self.all_tiles[gpmjcore.Suits.CHARACTERS][20]
        melds = []
        meld1 = gpmjcore.Meld()
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][12])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][7])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][11])
        melds.append(meld1)
        meld2 = gpmjcore.Meld()
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][14])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][16])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][20])
        melds.append(meld2)
        meld3 = gpmjcore.Meld()
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][15])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][17])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][21])
        melds.append(meld3)
        meld4 = gpmjcore.Meld()
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][15])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][16])
        meld4.add_tile(last_tile)
        melds.append(meld4)
        eye = gpmjcore.Eye()
        eye.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][21])
        eye.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][22])
        expected = (gpmjcore.HandFlag.NO_POINTS_HAND | \
                    gpmjcore.HandFlag.ONE_SET_OF_IDENTICAL_SEQUENCES | \
                    gpmjcore.HandFlag.ALL_SIMPLES)
        win_hand = gpmjcore.WinHand(last_tile, False, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_meld(meld1)
        win_hand.append_meld(meld2)
        win_hand.append_meld(meld3)
        win_hand.append_meld(meld4)
        win_hand.append_eye(eye)
        self.basic_hand_jc.judge_chain(win_hand)
        self.assertEqual(win_hand.hand_flag, expected)
        win_hand.calc_points()
        self.assertEqual(win_hand.hand_point, 20)
        self.assertEqual(win_hand.hand_value, 3)

    def test_HandJudgeChain_1(self):
        # [B1][B2][B3][D1][D2][D3][D7][D8][D9][C2][C3][C9][C9] + [C1]
        last_tile = self.all_tiles[gpmjcore.Suits.CHARACTERS][0]
        melds = []
        meld1 = gpmjcore.Meld()
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][3])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][4])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][8])
        melds.append(meld1)
        meld2 = gpmjcore.Meld()
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][3])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][4])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][8])
        melds.append(meld2)
        meld3 = gpmjcore.Meld()
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][27])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][28])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][32])
        melds.append(meld3)
        meld4 = gpmjcore.Meld()
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][4])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][8])
        meld4.add_tile(last_tile)
        melds.append(meld4)
        eye = gpmjcore.Eye()
        eye.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][34])
        eye.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][35])
        expected = (gpmjcore.HandFlag.NO_POINTS_HAND | \
                    gpmjcore.HandFlag.TERMINAL_IN_EACH_SET | \
                    gpmjcore.HandFlag.THREE_COLOR_STRAIGHT)
        win_hand = gpmjcore.WinHand(last_tile, False, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_meld(meld1)
        win_hand.append_meld(meld2)
        win_hand.append_meld(meld3)
        win_hand.append_meld(meld4)
        win_hand.append_eye(eye)
        self.basic_hand_jc.judge_chain(win_hand)
        self.assertEqual(win_hand.hand_flag, expected)
        win_hand.calc_points()
        self.assertEqual(win_hand.hand_point, 20)
        self.assertEqual(win_hand.hand_value, 6)

    def test_HandJudgeChain_2(self):
        # [B1][B1][B2][B2][B3][B3][D7][D7][D8][D8][D9][D9][Ws] + [Ws]
        last_tile = self.all_tiles[gpmjcore.Suits.WINDS][8]
        melds = []
        meld1 = gpmjcore.Meld()
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][0])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][4])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][8])
        melds.append(meld1)
        meld2 = gpmjcore.Meld()
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][1])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][5])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][9])
        melds.append(meld2)
        meld3 = gpmjcore.Meld()
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][24])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][28])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][32])
        melds.append(meld3)
        meld4 = gpmjcore.Meld()
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][25])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][29])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][33])
        melds.append(meld4)
        eye = gpmjcore.Eye()
        eye.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][9])
        eye.add_tile(last_tile)
        expected = (gpmjcore.HandFlag.TWO_SET_OF_IDENTICAL_SEQUENCES | \
                    gpmjcore.HandFlag.TERMINAL_OR_HONOR_IN_EACH_SET)
        win_hand = gpmjcore.WinHand(last_tile, False, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_meld(meld1)
        win_hand.append_meld(meld2)
        win_hand.append_meld(meld3)
        win_hand.append_meld(meld4)
        win_hand.append_eye(eye)
        self.basic_hand_jc.judge_chain(win_hand)
        self.assertEqual(win_hand.hand_flag, expected)
        win_hand.calc_points()
        self.assertEqual(win_hand.hand_point, 30)
        self.assertEqual(win_hand.hand_value, 5)

    def test_HandJudgeChain_3(self):
        # [B1][B1][B2][B2][B3][B3][B3][B3][B4][B5][B6][B7][B9] + [B8]
        last_tile = self.all_tiles[gpmjcore.Suits.BAMBOO][28]
        melds = []
        meld1 = gpmjcore.Meld()
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][0])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][4])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][8])
        melds.append(meld1)
        meld2 = gpmjcore.Meld()
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][1])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][5])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][9])
        melds.append(meld2)
        meld3 = gpmjcore.Meld()
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][12])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][16])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][20])
        melds.append(meld3)
        meld4 = gpmjcore.Meld()
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][24])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][32])
        meld4.add_tile(last_tile)
        melds.append(meld4)
        eye = gpmjcore.Eye()
        eye.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][10])
        eye.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][11])
        expected = (gpmjcore.HandFlag.ONE_SET_OF_IDENTICAL_SEQUENCES | \
                    gpmjcore.HandFlag.FLUSH | \
                    gpmjcore.HandFlag.STRAIGHT)
        win_hand = gpmjcore.WinHand(last_tile, False, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_meld(meld1)
        win_hand.append_meld(meld2)
        win_hand.append_meld(meld3)
        win_hand.append_meld(meld4)
        win_hand.append_eye(eye)
        self.basic_hand_jc.judge_chain(win_hand)
        self.assertEqual(win_hand.hand_flag, expected)
        win_hand.calc_points()
        self.assertEqual(win_hand.hand_point, 30)
        self.assertEqual(win_hand.hand_value, 9)

    def test_HandJudgeChain_4(self):
        # [B1][B1][B1][B9][B9][B9][Wh][Wh][Wh][Gr][Gr][Rd][Rd] + [Gr]
        last_tile = self.all_tiles[gpmjcore.Suits.DRAGONS][6]
        melds = []
        meld1 = gpmjcore.Meld()
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][0])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][1])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][2])
        melds.append(meld1)
        meld2 = gpmjcore.Meld()
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][32])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][33])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][34])
        melds.append(meld2)
        meld3 = gpmjcore.Meld()
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][0])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][1])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][2])
        meld3.b_stolen = True
        melds.append(meld3)
        meld4 = gpmjcore.Meld()
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][4])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][5])
        meld4.add_tile(last_tile)
        melds.append(meld4)
        eye = gpmjcore.Eye()
        eye.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][8])
        eye.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][9])
        expected = (gpmjcore.HandFlag.ALL_TERMINALS_AND_HONORS | \
                    gpmjcore.HandFlag.LITTLE_THREE_DRAGONS | \
                    gpmjcore.HandFlag.WHITE_DRAGON | \
                    gpmjcore.HandFlag.GREEN_DRAGON | \
                    gpmjcore.HandFlag.HALF_FLUSH | \
                    gpmjcore.HandFlag.ALL_TRIPLET_HAND | \
                    gpmjcore.HandFlag.THREE_CLOSED_TRIPLETS)
        win_hand = gpmjcore.WinHand(last_tile, False, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_meld(meld1)
        win_hand.append_meld(meld2)
        win_hand.append_meld(meld3)
        win_hand.append_meld(meld4)
        win_hand.append_eye(eye)
        self.basic_hand_jc.judge_chain(win_hand)
        self.assertEqual(win_hand.hand_flag, expected)
        win_hand.calc_points()
        self.assertEqual(win_hand.hand_point, 60)
        self.assertEqual(win_hand.hand_value, 12)

    def test_HandJudgeChain_5(self):
        # [B6][B6][B6][B6][B7][B8][B9][D6][D6][D6][D6][C6][C6][C6][C6][Rd] + [Rd]
        last_tile = self.all_tiles[gpmjcore.Suits.DRAGONS][8]
        melds = []
        meld1 = gpmjcore.Meld()
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][20])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][21])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][22])
        meld1.make_kong(self.all_tiles[gpmjcore.Suits.BAMBOO][23])
        melds.append(meld1)
        meld2 = gpmjcore.Meld()
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][24])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][28])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][32])
        melds.append(meld2)
        meld3 = gpmjcore.Meld()
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][20])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][21])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][22])
        meld3.make_kong(self.all_tiles[gpmjcore.Suits.DOTS][23])
        melds.append(meld3)
        meld4 = gpmjcore.Meld()
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][20])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][21])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][22])
        meld4.make_kong(self.all_tiles[gpmjcore.Suits.CHARACTERS][23])
        meld4.b_stolen = True
        melds.append(meld4)
        eye = gpmjcore.Eye()
        eye.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][9])
        eye.add_tile(last_tile)
        expected = (gpmjcore.HandFlag.THREE_KONGS | \
                    gpmjcore.HandFlag.THREE_COLOR_TRIPLETS)
        win_hand = gpmjcore.WinHand(last_tile, False, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_meld(meld1)
        win_hand.append_meld(meld2)
        win_hand.append_meld(meld3)
        win_hand.append_meld(meld4)
        win_hand.append_eye(eye)
        self.basic_hand_jc.judge_chain(win_hand)
        self.assertEqual(win_hand.hand_flag, expected)
        win_hand.calc_points()
        self.assertEqual(win_hand.hand_point, 70)
        self.assertEqual(win_hand.hand_value, 4)

    def test_ThirteenOrphansJudge_13orphans_0(self):
        # [D1][D9][B1][B9][C1][C9][Es][St][Ws][Nt][Nt][Gr][Rd] + [Es]
        judge = gpmjcore.ThirteenOrphansJudge()
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.WINDS][14])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][10])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][5])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.WINDS][13])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.WINDS][4])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.WINDS][10])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.WINDS][2])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][2])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][33])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][32])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][3])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DOTS][1])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DOTS][35])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.WINDS][0])
        result = judge.judge_13orphans_hand(self.hand.pure_tiles)
        self.assertEqual(result, False)

    def test_ThirteenOrphansJudge_13orphans_1(self):
        # [D1][D9][B1][B9][C1][C9][Es][St][Ws][Nt][Wh][Gr][Rd] + [Es]
        judge = gpmjcore.ThirteenOrphansJudge()
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][1])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][10])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][5])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.WINDS][13])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.WINDS][4])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.WINDS][10])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.WINDS][2])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][2])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][33])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][32])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][3])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DOTS][1])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DOTS][35])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.WINDS][0])
        result = judge.judge_13orphans_hand(self.hand.pure_tiles)
        self.assertEqual(result, True)

    def test_SevenPairsJudge_7pairs_0(self):
        # [B1][B1][B3][B3][B3][B3][D1][D2][D2][Gr][Gr][Rd][Rd] + [D1]
        judge = gpmjcore.SevenPairsJudge()
        eyes = []
        eye1 = gpmjcore.Eye()
        eye1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][0])
        eye1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][1])
        eyes.append(eye1)
        eye2 = gpmjcore.Eye()
        eye2.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][8])
        eye2.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][9])
        eyes.append(eye2)
        eye3 = gpmjcore.Eye()
        eye3.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][10])
        eye3.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][11])
        eyes.append(eye3)
        eye4 = gpmjcore.Eye()
        eye4.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][0])
        last_tile = self.all_tiles[gpmjcore.Suits.DOTS][1]
        eye4.add_tile(last_tile)
        eyes.append(eye4)
        eye5 = gpmjcore.Eye()
        eye5.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][4])
        eye5.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][5])
        eyes.append(eye5)
        eye6 = gpmjcore.Eye()
        eye6.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][4])
        eye6.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][5])
        eyes.append(eye6)
        eye7 = gpmjcore.Eye()
        eye7.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][8])
        eye7.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][9])
        eyes.append(eye7)
        win_hand = gpmjcore.WinHand(last_tile, False, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_eye(eye1)
        win_hand.append_eye(eye2)
        win_hand.append_eye(eye3)
        win_hand.append_eye(eye4)
        win_hand.append_eye(eye5)
        win_hand.append_eye(eye6)
        win_hand.append_eye(eye7)
        result = judge.judge_hand(win_hand)
        self.assertEqual(result, False)

    def test_SevenPairsJudge_7pairs_1(self):
        # [B1][B1][B3][B3][B4][B4][D1][D2][D2][Gr][Gr][Rd][Rd] + [D1]
        judge = gpmjcore.SevenPairsJudge()
        eyes = []
        eye1 = gpmjcore.Eye()
        eye1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][0])
        eye1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][1])
        eyes.append(eye1)
        eye2 = gpmjcore.Eye()
        eye2.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][8])
        eye2.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][9])
        eyes.append(eye2)
        eye3 = gpmjcore.Eye()
        eye3.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][12])
        eye3.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][13])
        eyes.append(eye3)
        eye4 = gpmjcore.Eye()
        eye4.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][0])
        last_tile = self.all_tiles[gpmjcore.Suits.DOTS][1]
        eye4.add_tile(last_tile)
        eyes.append(eye4)
        eye5 = gpmjcore.Eye()
        eye5.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][4])
        eye5.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][5])
        eyes.append(eye5)
        eye6 = gpmjcore.Eye()
        eye6.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][4])
        eye6.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][5])
        eyes.append(eye6)
        eye7 = gpmjcore.Eye()
        eye7.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][8])
        eye7.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][9])
        eyes.append(eye7)
        win_hand = gpmjcore.WinHand(last_tile, False, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_eye(eye1)
        win_hand.append_eye(eye2)
        win_hand.append_eye(eye3)
        win_hand.append_eye(eye4)
        win_hand.append_eye(eye5)
        win_hand.append_eye(eye6)
        win_hand.append_eye(eye7)
        result = judge.judge_hand(win_hand)
        self.assertEqual(result, True)

    def test_AllHonorsJudge_7pairs_0(self):
        # [Es][Es][St][St][Ws][Ws][D1][Wh][Wh][Gr][Gr][Rd][Rd] + [D1]
        judge = gpmjcore.AllHonorsJudge()
        eyes = []
        eye1 = gpmjcore.Eye()
        eye1.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][0])
        eye1.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][1])
        eyes.append(eye1)
        eye2 = gpmjcore.Eye()
        eye2.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][4])
        eye2.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][5])
        eyes.append(eye2)
        eye3 = gpmjcore.Eye()
        eye3.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][8])
        eye3.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][9])
        eyes.append(eye3)
        eye4 = gpmjcore.Eye()
        eye4.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][0])
        last_tile = self.all_tiles[gpmjcore.Suits.DOTS][1]
        eye4.add_tile(last_tile)
        eyes.append(eye4)
        eye5 = gpmjcore.Eye()
        eye5.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][0])
        eye5.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][1])
        eyes.append(eye5)
        eye6 = gpmjcore.Eye()
        eye6.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][4])
        eye6.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][5])
        eyes.append(eye6)
        eye7 = gpmjcore.Eye()
        eye7.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][8])
        eye7.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][9])
        eyes.append(eye7)
        win_hand = gpmjcore.WinHand(last_tile, False, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_eye(eye1)
        win_hand.append_eye(eye2)
        win_hand.append_eye(eye3)
        win_hand.append_eye(eye4)
        win_hand.append_eye(eye5)
        win_hand.append_eye(eye6)
        win_hand.append_eye(eye7)
        result = judge.judge_hand(win_hand)
        self.assertEqual(result, False)

    def test_AllHonorsJudge_7pairs_1(self):
        # [Es][Es][St][St][Ws][Ws][Nt][Wh][Wh][Gr][Gr][Rd][Rd] + [Nt]
        judge = gpmjcore.AllHonorsJudge()
        eyes = []
        eye1 = gpmjcore.Eye()
        eye1.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][0])
        eye1.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][1])
        eyes.append(eye1)
        eye2 = gpmjcore.Eye()
        eye2.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][4])
        eye2.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][5])
        eyes.append(eye2)
        eye3 = gpmjcore.Eye()
        eye3.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][8])
        eye3.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][9])
        eyes.append(eye3)
        eye4 = gpmjcore.Eye()
        eye4.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][12])
        last_tile = self.all_tiles[gpmjcore.Suits.WINDS][13]
        eye4.add_tile(last_tile)
        eyes.append(eye4)
        eye5 = gpmjcore.Eye()
        eye5.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][0])
        eye5.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][1])
        eyes.append(eye5)
        eye6 = gpmjcore.Eye()
        eye6.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][4])
        eye6.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][5])
        eyes.append(eye6)
        eye7 = gpmjcore.Eye()
        eye7.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][8])
        eye7.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][9])
        eyes.append(eye7)
        win_hand = gpmjcore.WinHand(last_tile, False, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_eye(eye1)
        win_hand.append_eye(eye2)
        win_hand.append_eye(eye3)
        win_hand.append_eye(eye4)
        win_hand.append_eye(eye5)
        win_hand.append_eye(eye6)
        win_hand.append_eye(eye7)
        result = judge.judge_hand(win_hand)
        self.assertEqual(result, True)

    def test_FlushJudge_7pairs_0(self):
        # [C1][C1][C9][C9][Wh][Wh][Gr][Gr][Rd][Rd][Es][Es][C5] + [C5]
        judge = gpmjcore.FlushJudge()
        eyes = []
        eye1 = gpmjcore.Eye()
        eye1.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][0])
        eye1.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][1])
        eyes.append(eye1)
        eye2 = gpmjcore.Eye()
        eye2.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][32])
        eye2.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][33])
        eyes.append(eye2)
        eye3 = gpmjcore.Eye()
        eye3.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][0])
        eye3.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][1])
        eyes.append(eye3)
        eye4 = gpmjcore.Eye()
        eye4.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][4])
        eye4.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][5])
        eyes.append(eye4)
        eye5 = gpmjcore.Eye()
        eye5.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][8])
        eye5.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][9])
        eyes.append(eye5)
        eye6 = gpmjcore.Eye()
        eye6.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][0])
        eye6.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][1])
        eyes.append(eye6)
        eye7 = gpmjcore.Eye()
        eye7.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][16])
        last_tile = self.all_tiles[gpmjcore.Suits.CHARACTERS][17]
        eye7.add_tile(last_tile)
        eyes.append(eye7)
        win_hand = gpmjcore.WinHand(last_tile, False, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_eye(eye1)
        win_hand.append_eye(eye2)
        win_hand.append_eye(eye3)
        win_hand.append_eye(eye4)
        win_hand.append_eye(eye5)
        win_hand.append_eye(eye6)
        win_hand.append_eye(eye7)
        result = judge.judge_hand(win_hand)
        self.assertEqual(result, False)

    def test_FlushJudge_7pairs_1(self):
        # [C1][C1][C9][C9][C2][C2][C3][C3][C7][C7][C4][C4][C5] + [C5]
        judge = gpmjcore.FlushJudge()
        eyes = []
        eye1 = gpmjcore.Eye()
        eye1.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][0])
        eye1.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][1])
        eyes.append(eye1)
        eye2 = gpmjcore.Eye()
        eye2.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][32])
        eye2.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][33])
        eyes.append(eye2)
        eye3 = gpmjcore.Eye()
        eye3.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][4])
        eye3.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][5])
        eyes.append(eye3)
        eye4 = gpmjcore.Eye()
        eye4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][8])
        eye4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][9])
        eyes.append(eye4)
        eye5 = gpmjcore.Eye()
        eye5.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][24])
        eye5.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][25])
        eyes.append(eye5)
        eye6 = gpmjcore.Eye()
        eye6.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][12])
        eye6.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][13])
        eyes.append(eye6)
        eye7 = gpmjcore.Eye()
        eye7.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][16])
        last_tile = self.all_tiles[gpmjcore.Suits.CHARACTERS][17]
        eye7.add_tile(last_tile)
        eyes.append(eye7)
        win_hand = gpmjcore.WinHand(last_tile, False, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_eye(eye1)
        win_hand.append_eye(eye2)
        win_hand.append_eye(eye3)
        win_hand.append_eye(eye4)
        win_hand.append_eye(eye5)
        win_hand.append_eye(eye6)
        win_hand.append_eye(eye7)
        result = judge.judge_hand(win_hand)
        self.assertEqual(result, True)

    def test_HalfFlushJudge_7pairs_0(self):
        # [C1][C1][C9][C9][Wh][Wh][Gr][Gr][Rd][Rd][Es][Es][D1] + [D1]
        judge = gpmjcore.HalfFlushJudge()
        eyes = []
        eye1 = gpmjcore.Eye()
        eye1.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][0])
        eye1.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][1])
        eyes.append(eye1)
        eye2 = gpmjcore.Eye()
        eye2.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][32])
        eye2.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][33])
        eyes.append(eye2)
        eye3 = gpmjcore.Eye()
        eye3.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][0])
        eye3.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][1])
        eyes.append(eye3)
        eye4 = gpmjcore.Eye()
        eye4.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][4])
        eye4.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][5])
        eyes.append(eye4)
        eye5 = gpmjcore.Eye()
        eye5.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][8])
        eye5.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][9])
        eyes.append(eye5)
        eye6 = gpmjcore.Eye()
        eye6.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][0])
        eye6.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][1])
        eyes.append(eye6)
        eye7 = gpmjcore.Eye()
        eye7.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][0])
        last_tile = self.all_tiles[gpmjcore.Suits.DOTS][1]
        eye7.add_tile(last_tile)
        eyes.append(eye7)
        win_hand = gpmjcore.WinHand(last_tile, False, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_eye(eye1)
        win_hand.append_eye(eye2)
        win_hand.append_eye(eye3)
        win_hand.append_eye(eye4)
        win_hand.append_eye(eye5)
        win_hand.append_eye(eye6)
        win_hand.append_eye(eye7)
        result = judge.judge_hand(win_hand)
        self.assertEqual(result, False)

    def test_HalfFlushJudge_7pairs_1(self):
        # [C1][C1][C9][C9][Wh][Wh][Gr][Gr][Rd][Rd][Es][Es][C5] + [C5]
        judge = gpmjcore.HalfFlushJudge()
        eyes = []
        eye1 = gpmjcore.Eye()
        eye1.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][0])
        eye1.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][1])
        eyes.append(eye1)
        eye2 = gpmjcore.Eye()
        eye2.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][32])
        eye2.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][33])
        eyes.append(eye2)
        eye3 = gpmjcore.Eye()
        eye3.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][0])
        eye3.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][1])
        eyes.append(eye3)
        eye4 = gpmjcore.Eye()
        eye4.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][4])
        eye4.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][5])
        eyes.append(eye4)
        eye5 = gpmjcore.Eye()
        eye5.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][8])
        eye5.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][9])
        eyes.append(eye5)
        eye6 = gpmjcore.Eye()
        eye6.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][0])
        eye6.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][1])
        eyes.append(eye6)
        eye7 = gpmjcore.Eye()
        eye7.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][16])
        last_tile = self.all_tiles[gpmjcore.Suits.CHARACTERS][17]
        eye7.add_tile(last_tile)
        eyes.append(eye7)
        win_hand = gpmjcore.WinHand(last_tile, False, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_eye(eye1)
        win_hand.append_eye(eye2)
        win_hand.append_eye(eye3)
        win_hand.append_eye(eye4)
        win_hand.append_eye(eye5)
        win_hand.append_eye(eye6)
        win_hand.append_eye(eye7)
        result = judge.judge_hand(win_hand)
        self.assertEqual(result, True)

    def test_AllTerminalsAndHonorsJudge_7pairs_0(self):
        # [C1][C1][C9][C9][Wh][Wh][Gr][Gr][Rd][Rd][Es][Es][D2] + [D2]
        judge = gpmjcore.AllTerminalsAndHonorsJudge()
        eyes = []
        eye1 = gpmjcore.Eye()
        eye1.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][0])
        eye1.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][1])
        eyes.append(eye1)
        eye2 = gpmjcore.Eye()
        eye2.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][32])
        eye2.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][33])
        eyes.append(eye2)
        eye3 = gpmjcore.Eye()
        eye3.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][0])
        eye3.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][1])
        eyes.append(eye3)
        eye4 = gpmjcore.Eye()
        eye4.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][4])
        eye4.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][5])
        eyes.append(eye4)
        eye5 = gpmjcore.Eye()
        eye5.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][8])
        eye5.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][9])
        eyes.append(eye5)
        eye6 = gpmjcore.Eye()
        eye6.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][0])
        eye6.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][1])
        eyes.append(eye6)
        eye7 = gpmjcore.Eye()
        eye7.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][4])
        last_tile = self.all_tiles[gpmjcore.Suits.DOTS][5]
        eye7.add_tile(last_tile)
        eyes.append(eye7)
        win_hand = gpmjcore.WinHand(last_tile, False, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_eye(eye1)
        win_hand.append_eye(eye2)
        win_hand.append_eye(eye3)
        win_hand.append_eye(eye4)
        win_hand.append_eye(eye5)
        win_hand.append_eye(eye6)
        win_hand.append_eye(eye7)
        result = judge.judge_hand(win_hand)
        self.assertEqual(result, False)

    def test_AllTerminalsAndHonorsJudge_7pairs_1(self):
        # [C1][C1][C9][C9][Wh][Wh][Gr][Gr][Rd][Rd][Es][Es][D1] + [D1]
        judge = gpmjcore.AllTerminalsAndHonorsJudge()
        eyes = []
        eye1 = gpmjcore.Eye()
        eye1.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][0])
        eye1.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][1])
        eyes.append(eye1)
        eye2 = gpmjcore.Eye()
        eye2.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][32])
        eye2.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][33])
        eyes.append(eye2)
        eye3 = gpmjcore.Eye()
        eye3.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][0])
        eye3.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][1])
        eyes.append(eye3)
        eye4 = gpmjcore.Eye()
        eye4.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][4])
        eye4.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][5])
        eyes.append(eye4)
        eye5 = gpmjcore.Eye()
        eye5.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][8])
        eye5.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][9])
        eyes.append(eye5)
        eye6 = gpmjcore.Eye()
        eye6.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][0])
        eye6.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][1])
        eyes.append(eye6)
        eye7 = gpmjcore.Eye()
        eye7.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][0])
        last_tile = self.all_tiles[gpmjcore.Suits.DOTS][1]
        eye7.add_tile(last_tile)
        eyes.append(eye7)
        win_hand = gpmjcore.WinHand(last_tile, False, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_eye(eye1)
        win_hand.append_eye(eye2)
        win_hand.append_eye(eye3)
        win_hand.append_eye(eye4)
        win_hand.append_eye(eye5)
        win_hand.append_eye(eye6)
        win_hand.append_eye(eye7)
        result = judge.judge_hand(win_hand)
        self.assertEqual(result, True)

    def test_AllSimplesJudge_7pairs_0(self):
        # [C1][C1][C2][C2][C4][C4][C6][C6][C8][C8][D8][D8][D2] + [D2]
        judge = gpmjcore.AllSimplesJudge()
        eyes = []
        eye1 = gpmjcore.Eye()
        eye1.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][0])
        eye1.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][1])
        eyes.append(eye1)
        eye2 = gpmjcore.Eye()
        eye2.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][6])
        eye2.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][7])
        eyes.append(eye2)
        eye3 = gpmjcore.Eye()
        eye3.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][12])
        eye3.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][13])
        eyes.append(eye3)
        eye4 = gpmjcore.Eye()
        eye4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][20])
        eye4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][21])
        eyes.append(eye4)
        eye5 = gpmjcore.Eye()
        eye5.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][28])
        eye5.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][29])
        eyes.append(eye5)
        eye6 = gpmjcore.Eye()
        eye6.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][28])
        eye6.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][29])
        eyes.append(eye6)
        eye7 = gpmjcore.Eye()
        eye7.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][4])
        last_tile = self.all_tiles[gpmjcore.Suits.DOTS][5]
        eye7.add_tile(last_tile)
        eyes.append(eye7)
        win_hand = gpmjcore.WinHand(last_tile, False, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_eye(eye1)
        win_hand.append_eye(eye2)
        win_hand.append_eye(eye3)
        win_hand.append_eye(eye4)
        win_hand.append_eye(eye5)
        win_hand.append_eye(eye6)
        win_hand.append_eye(eye7)
        result = judge.judge_hand(win_hand)
        self.assertEqual(result, False)

    def test_AllSimplesJudge_7pairs_1(self):
        # [D4][D4][C2][C2][C4][C4][C6][C6][C8][C8][D8][D8][D2] + [D2]
        judge = gpmjcore.AllSimplesJudge()
        eyes = []
        eye1 = gpmjcore.Eye()
        eye1.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][12])
        eye1.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][13])
        eyes.append(eye1)
        eye2 = gpmjcore.Eye()
        eye2.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][6])
        eye2.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][7])
        eyes.append(eye2)
        eye3 = gpmjcore.Eye()
        eye3.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][12])
        eye3.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][13])
        eyes.append(eye3)
        eye4 = gpmjcore.Eye()
        eye4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][20])
        eye4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][21])
        eyes.append(eye4)
        eye5 = gpmjcore.Eye()
        eye5.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][28])
        eye5.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][29])
        eyes.append(eye5)
        eye6 = gpmjcore.Eye()
        eye6.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][28])
        eye6.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][29])
        eyes.append(eye6)
        eye7 = gpmjcore.Eye()
        eye7.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][4])
        last_tile = self.all_tiles[gpmjcore.Suits.DOTS][5]
        eye7.add_tile(last_tile)
        eyes.append(eye7)
        win_hand = gpmjcore.WinHand(last_tile, False, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_eye(eye1)
        win_hand.append_eye(eye2)
        win_hand.append_eye(eye3)
        win_hand.append_eye(eye4)
        win_hand.append_eye(eye5)
        win_hand.append_eye(eye6)
        win_hand.append_eye(eye7)
        result = judge.judge_hand(win_hand)
        self.assertEqual(result, True)

    def test_NineGatesJudge_0(self):
        # [C1][C1][C2][C2][C3][C3][C4][C5][C6][C7][C8][C8][C9] + [C8]
        judge = gpmjcore.NineGatesJudge()
        last_tile = self.all_tiles[gpmjcore.Suits.CHARACTERS][29]
        melds = []
        meld1 = gpmjcore.Meld()
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][2])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][5])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][10])
        melds.append(meld1)
        meld2 = gpmjcore.Meld()
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][3])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][4])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][11])
        melds.append(meld2)
        meld3 = gpmjcore.Meld()
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][12])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][20])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][16])
        melds.append(meld3)
        meld4 = gpmjcore.Meld()
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][24])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][28])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][32])
        melds.append(meld4)
        eye = gpmjcore.Eye()
        eye.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][30])
        eye.add_tile(last_tile)
        win_hand = gpmjcore.WinHand(last_tile, True, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_meld(meld1)
        win_hand.append_meld(meld2)
        win_hand.append_meld(meld3)
        win_hand.append_meld(meld4)
        win_hand.append_eye(eye)
        result = judge.judge_hand(win_hand)
        self.assertEqual(result, False)

    def test_NineGatesJudge_1(self):
        # [C1][C1][C1][C2][C3][C3][C4][C5][C6][C7][C8][C9][C9] + [C9]
        judge = gpmjcore.NineGatesJudge()
        last_tile = self.all_tiles[gpmjcore.Suits.CHARACTERS][35]
        melds = []
        meld1 = gpmjcore.Meld()
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][2])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][5])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][10])
        melds.append(meld1)
        meld2 = gpmjcore.Meld()
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][9])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][13])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][17])
        melds.append(meld2)
        meld3 = gpmjcore.Meld()
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][21])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][25])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][29])
        melds.append(meld3)
        meld4 = gpmjcore.Meld()
        meld4.add_tile(last_tile)
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][33])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][32])
        melds.append(meld4)
        eye = gpmjcore.Eye()
        eye.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][0])
        eye.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][1])
        win_hand = gpmjcore.WinHand(last_tile, True, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_meld(meld1)
        win_hand.append_meld(meld2)
        win_hand.append_meld(meld3)
        win_hand.append_meld(meld4)
        win_hand.append_eye(eye)
        result = judge.judge_hand(win_hand)
        self.assertEqual(result, True)

    def test_FourKongsJudge_0(self):
        # [B2][B2][B2][B2][D3][D3][D3][D3][D6][D6][D6][D6][C2][C2][C9][C9] + [C9]
        judge = gpmjcore.FourKongsJudge()
        last_tile = self.all_tiles[gpmjcore.Suits.CHARACTERS][33]
        melds = []
        meld1 = gpmjcore.Meld()
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][4])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][5])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][6])
        meld1.make_kong(self.all_tiles[gpmjcore.Suits.BAMBOO][7])
        melds.append(meld1)
        meld2 = gpmjcore.Meld()
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][4])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][5])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][6])
        meld2.make_kong(self.all_tiles[gpmjcore.Suits.DOTS][7])
        melds.append(meld2)
        meld3 = gpmjcore.Meld()
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][20])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][21])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][22])
        meld3.b_stolen = True
        meld3.make_kong(self.all_tiles[gpmjcore.Suits.DOTS][23])
        melds.append(meld3)
        meld4 = gpmjcore.Meld()
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][34])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][35])
        meld4.add_tile(last_tile)
        melds.append(meld4)
        eye = gpmjcore.Eye()
        eye.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][4])
        eye.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][5])
        win_hand = gpmjcore.WinHand(last_tile, True, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_meld(meld1)
        win_hand.append_meld(meld2)
        win_hand.append_meld(meld3)
        win_hand.append_meld(meld4)
        win_hand.append_eye(eye)
        result = judge.judge_hand(win_hand)
        self.assertEqual(result, False)

    def test_FourKongsJudge_1(self):
        # [B2][B2][B2][B2][D3][D3][D3][D3][D6][D6][D6][D6][C2][C2][C7][C8] + [C9]
        judge = gpmjcore.FourKongsJudge()
        last_tile = self.all_tiles[gpmjcore.Suits.CHARACTERS][33]
        melds = []
        meld1 = gpmjcore.Meld()
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][4])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][5])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][6])
        meld1.make_kong(self.all_tiles[gpmjcore.Suits.BAMBOO][7])
        melds.append(meld1)
        meld2 = gpmjcore.Meld()
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][4])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][5])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][6])
        meld2.make_kong(self.all_tiles[gpmjcore.Suits.DOTS][7])
        melds.append(meld2)
        meld3 = gpmjcore.Meld()
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][20])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][21])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][22])
        meld3.b_stolen = True
        meld3.make_kong(self.all_tiles[gpmjcore.Suits.DOTS][23])
        melds.append(meld3)
        meld4 = gpmjcore.Meld()
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][27])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][28])
        meld4.add_tile(last_tile)
        melds.append(meld4)
        eye = gpmjcore.Eye()
        eye.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][4])
        eye.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][5])
        win_hand = gpmjcore.WinHand(last_tile, True, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_meld(meld1)
        win_hand.append_meld(meld2)
        win_hand.append_meld(meld3)
        win_hand.append_meld(meld4)
        win_hand.append_eye(eye)
        result = judge.judge_hand(win_hand)
        self.assertEqual(result, False)

    def test_FourKongsJudge_2(self):
        # [B2][B2][B2][B2][D3][D3][D3][D3][D6][D6][D6][D6][C2][C9][C9][C9][C9] + [C2]
        judge = gpmjcore.FourKongsJudge()
        last_tile = self.all_tiles[gpmjcore.Suits.CHARACTERS][4]
        melds = []
        meld1 = gpmjcore.Meld()
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][4])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][5])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][6])
        meld1.make_kong(self.all_tiles[gpmjcore.Suits.BAMBOO][7])
        melds.append(meld1)
        meld2 = gpmjcore.Meld()
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][4])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][5])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][6])
        meld2.make_kong(self.all_tiles[gpmjcore.Suits.DOTS][7])
        melds.append(meld2)
        meld3 = gpmjcore.Meld()
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][20])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][21])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][22])
        meld3.b_stolen = True
        meld3.make_kong(self.all_tiles[gpmjcore.Suits.DOTS][23])
        melds.append(meld3)
        meld4 = gpmjcore.Meld()
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][34])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][35])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][33])
        meld4.make_kong(self.all_tiles[gpmjcore.Suits.CHARACTERS][32])
        melds.append(meld4)
        eye = gpmjcore.Eye()
        eye.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][5])
        eye.add_tile(last_tile)
        win_hand = gpmjcore.WinHand(last_tile, True, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_meld(meld1)
        win_hand.append_meld(meld2)
        win_hand.append_meld(meld3)
        win_hand.append_meld(meld4)
        win_hand.append_eye(eye)
        result = judge.judge_hand(win_hand)
        self.assertEqual(result, True)

    def test_AllGreenJudge_0(self):
        # [B2][B2][B3][B3][B4][B4][B6][B7][B8][B8][B8][Gr][Gr] + [Gr]
        judge = gpmjcore.AllGreenJudge()
        last_tile = self.all_tiles[gpmjcore.Suits.DRAGONS][4]
        melds = []
        meld1 = gpmjcore.Meld()
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][23])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][24])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][28])
        melds.append(meld1)
        meld2 = gpmjcore.Meld()
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][12])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][4])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][8])
        melds.append(meld2)
        meld3 = gpmjcore.Meld()
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][13])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][5])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][9])
        meld3.b_stolen = True
        melds.append(meld3)
        meld4 = gpmjcore.Meld()
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][5])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][6])
        meld4.add_tile(last_tile)
        melds.append(meld4)
        eye = gpmjcore.Eye()
        eye.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][30])
        eye.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][31])
        win_hand = gpmjcore.WinHand(last_tile, True, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_meld(meld1)
        win_hand.append_meld(meld2)
        win_hand.append_meld(meld3)
        win_hand.append_meld(meld4)
        win_hand.append_eye(eye)
        result = judge.judge_hand(win_hand)
        self.assertEqual(result, False)

    def test_AllGreenJudge_1(self):
        # [B2][B2][B3][B3][B4][B4][B6][B6][B8][B8][B8][Gr][Gr] + [Gr]
        judge = gpmjcore.AllGreenJudge()
        last_tile = self.all_tiles[gpmjcore.Suits.DRAGONS][4]
        melds = []
        meld1 = gpmjcore.Meld()
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][29])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][30])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][28])
        melds.append(meld1)
        meld2 = gpmjcore.Meld()
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][12])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][4])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][8])
        melds.append(meld2)
        meld3 = gpmjcore.Meld()
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][13])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][5])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][9])
        meld3.b_stolen = True
        melds.append(meld3)
        meld4 = gpmjcore.Meld()
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][5])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][6])
        meld4.add_tile(last_tile)
        melds.append(meld4)
        eye = gpmjcore.Eye()
        eye.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][20])
        eye.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][21])
        win_hand = gpmjcore.WinHand(last_tile, True, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_meld(meld1)
        win_hand.append_meld(meld2)
        win_hand.append_meld(meld3)
        win_hand.append_meld(meld4)
        win_hand.append_eye(eye)
        result = judge.judge_hand(win_hand)
        self.assertEqual(result, True)

    def test_AllGreenJudge_2(self):
        # [B2][B2][B3][B3][B4][B4][B4][B6][B6][B6][B8][B8][B8] + [B4]
        judge = gpmjcore.AllGreenJudge()
        last_tile = self.all_tiles[gpmjcore.Suits.BAMBOO][10]
        melds = []
        meld1 = gpmjcore.Meld()
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][29])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][30])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][28])
        melds.append(meld1)
        meld2 = gpmjcore.Meld()
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][12])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][4])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][8])
        melds.append(meld2)
        meld3 = gpmjcore.Meld()
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][13])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][5])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][9])
        meld3.b_stolen = True
        melds.append(meld3)
        meld4 = gpmjcore.Meld()
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][20])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][21])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][22])
        melds.append(meld4)
        eye = gpmjcore.Eye()
        eye.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][11])
        eye.add_tile(last_tile)
        win_hand = gpmjcore.WinHand(last_tile, True, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_meld(meld1)
        win_hand.append_meld(meld2)
        win_hand.append_meld(meld3)
        win_hand.append_meld(meld4)
        win_hand.append_eye(eye)
        result = judge.judge_hand(win_hand)
        self.assertEqual(result, True)

    def test_AllTerminalsJudge_0(self):
        # [B1][B1][B9][B9][B9][D1][D1][D1][D9][D9][D9][Nt][Nt] + [Nt]
        judge = gpmjcore.AllTerminalsJudge()
        last_tile = self.all_tiles[gpmjcore.Suits.WINDS][12]
        melds = []
        meld1 = gpmjcore.Meld()
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][32])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][33])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][34])
        melds.append(meld1)
        meld2 = gpmjcore.Meld()
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][0])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][1])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][2])
        melds.append(meld2)
        meld3 = gpmjcore.Meld()
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][32])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][33])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][34])
        meld3.b_stolen = True
        melds.append(meld3)
        meld4 = gpmjcore.Meld()
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][13])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][14])
        meld4.add_tile(last_tile)
        melds.append(meld4)
        eye = gpmjcore.Eye()
        eye.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][0])
        eye.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][1])
        win_hand = gpmjcore.WinHand(last_tile, True, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_meld(meld1)
        win_hand.append_meld(meld2)
        win_hand.append_meld(meld3)
        win_hand.append_meld(meld4)
        win_hand.append_eye(eye)
        result = judge.judge_hand(win_hand)
        self.assertEqual(result, False)

    def test_AllTerminalsJudge_1(self):
        # [B1][B1][B9][B9][B9][D1][D1][D1][D9][D9][D9][C1][C2] + [C3]
        judge = gpmjcore.AllTerminalsJudge()
        last_tile = self.all_tiles[gpmjcore.Suits.CHARACTERS][8]
        melds = []
        meld1 = gpmjcore.Meld()
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][32])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][33])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][34])
        melds.append(meld1)
        meld2 = gpmjcore.Meld()
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][0])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][1])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][2])
        melds.append(meld2)
        meld3 = gpmjcore.Meld()
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][32])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][33])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][34])
        melds.append(meld3)
        meld4 = gpmjcore.Meld()
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][4])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][0])
        meld4.add_tile(last_tile)
        melds.append(meld4)
        eye = gpmjcore.Eye()
        eye.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][0])
        eye.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][1])
        win_hand = gpmjcore.WinHand(last_tile, False, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_meld(meld1)
        win_hand.append_meld(meld2)
        win_hand.append_meld(meld3)
        win_hand.append_meld(meld4)
        win_hand.append_eye(eye)
        result = judge.judge_hand(win_hand)
        self.assertEqual(result, False)

    def test_AllTerminalsJudge_2(self):
        # [B1][B1][B9][B9][B9][D1][D1][D1][D9][D9][D9][C1][C1] + [C1]
        judge = gpmjcore.AllTerminalsJudge()
        last_tile = self.all_tiles[gpmjcore.Suits.CHARACTERS][2]
        melds = []
        meld1 = gpmjcore.Meld()
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][32])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][33])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][34])
        melds.append(meld1)
        meld2 = gpmjcore.Meld()
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][0])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][1])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][2])
        melds.append(meld2)
        meld3 = gpmjcore.Meld()
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][32])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][33])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][34])
        meld3.b_stolen = True
        melds.append(meld3)
        meld4 = gpmjcore.Meld()
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][1])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][0])
        meld4.add_tile(last_tile)
        melds.append(meld4)
        eye = gpmjcore.Eye()
        eye.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][0])
        eye.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][1])
        win_hand = gpmjcore.WinHand(last_tile, True, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_meld(meld1)
        win_hand.append_meld(meld2)
        win_hand.append_meld(meld3)
        win_hand.append_meld(meld4)
        win_hand.append_eye(eye)
        result = judge.judge_hand(win_hand)
        self.assertEqual(result, True)

    def test_AllHonorsJudge_0(self):
        # [B1][B1][Es][Es][Es][St][St][St][Ws][Ws][Ws][Nt][Nt] + [Nt]
        judge = gpmjcore.AllHonorsJudge()
        last_tile = self.all_tiles[gpmjcore.Suits.WINDS][12]
        melds = []
        meld1 = gpmjcore.Meld()
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][8])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][9])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][10])
        melds.append(meld1)
        meld2 = gpmjcore.Meld()
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][0])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][1])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][2])
        melds.append(meld2)
        meld3 = gpmjcore.Meld()
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][4])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][5])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][6])
        meld3.b_stolen = True
        melds.append(meld3)
        meld4 = gpmjcore.Meld()
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][13])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][14])
        meld4.add_tile(last_tile)
        melds.append(meld4)
        eye = gpmjcore.Eye()
        eye.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][0])
        eye.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][1])
        win_hand = gpmjcore.WinHand(last_tile, True, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_meld(meld1)
        win_hand.append_meld(meld2)
        win_hand.append_meld(meld3)
        win_hand.append_meld(meld4)
        win_hand.append_eye(eye)
        result = judge.judge_hand(win_hand)
        self.assertEqual(result, False)

    def test_AllHonorsJudge_1(self):
        # [Wh][Wh][Es][Es][Es][St][St][St][Ws][Ws][Ws][Nt][Nt] + [Nt]
        judge = gpmjcore.BigFourWindsJudge()
        last_tile = self.all_tiles[gpmjcore.Suits.WINDS][12]
        melds = []
        meld1 = gpmjcore.Meld()
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][8])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][9])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][10])
        melds.append(meld1)
        meld2 = gpmjcore.Meld()
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][0])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][1])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][2])
        melds.append(meld2)
        meld3 = gpmjcore.Meld()
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][4])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][5])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][6])
        meld3.b_stolen = True
        melds.append(meld3)
        meld4 = gpmjcore.Meld()
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][13])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][14])
        meld4.add_tile(last_tile)
        melds.append(meld4)
        eye = gpmjcore.Eye()
        eye.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][0])
        eye.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][1])
        win_hand = gpmjcore.WinHand(last_tile, True, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_meld(meld1)
        win_hand.append_meld(meld2)
        win_hand.append_meld(meld3)
        win_hand.append_meld(meld4)
        win_hand.append_eye(eye)
        result = judge.judge_hand(win_hand)
        self.assertEqual(result, True)

    def test_BigFourWindsJudge_0(self):
        # [B1][B1][B1][Es][Es][Es][St][St][St][Ws][Ws][Nt][Nt] + [Nt]
        judge = gpmjcore.BigFourWindsJudge()
        last_tile = self.all_tiles[gpmjcore.Suits.WINDS][12]
        melds = []
        meld1 = gpmjcore.Meld()
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][0])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][2])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][1])
        melds.append(meld1)
        meld2 = gpmjcore.Meld()
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][0])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][1])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][2])
        melds.append(meld2)
        meld3 = gpmjcore.Meld()
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][4])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][5])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][6])
        meld3.b_stolen = True
        melds.append(meld3)
        meld4 = gpmjcore.Meld()
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][13])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][14])
        meld4.add_tile(last_tile)
        melds.append(meld4)
        eye = gpmjcore.Eye()
        eye.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][8])
        eye.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][9])
        win_hand = gpmjcore.WinHand(last_tile, True, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_meld(meld1)
        win_hand.append_meld(meld2)
        win_hand.append_meld(meld3)
        win_hand.append_meld(meld4)
        win_hand.append_eye(eye)
        result = judge.judge_hand(win_hand)
        self.assertEqual(result, False)

    def test_BigFourWindsJudge_1(self):
        # [B1][B1][Es][Es][Es][St][St][St][Ws][Ws][Ws][Nt][Nt] + [Nt]
        judge = gpmjcore.BigFourWindsJudge()
        last_tile = self.all_tiles[gpmjcore.Suits.WINDS][12]
        melds = []
        meld1 = gpmjcore.Meld()
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][8])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][9])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][10])
        melds.append(meld1)
        meld2 = gpmjcore.Meld()
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][0])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][1])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][2])
        melds.append(meld2)
        meld3 = gpmjcore.Meld()
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][4])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][5])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][6])
        meld3.b_stolen = True
        melds.append(meld3)
        meld4 = gpmjcore.Meld()
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][13])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][14])
        meld4.add_tile(last_tile)
        melds.append(meld4)
        eye = gpmjcore.Eye()
        eye.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][0])
        eye.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][1])
        win_hand = gpmjcore.WinHand(last_tile, True, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_meld(meld1)
        win_hand.append_meld(meld2)
        win_hand.append_meld(meld3)
        win_hand.append_meld(meld4)
        win_hand.append_eye(eye)
        result = judge.judge_hand(win_hand)
        self.assertEqual(result, True)

    def test_LittleFourWindsJudge_0(self):
        # [B1][B1][B1][Es][Es][Es][St][St][St][Ws][Ws][Nt][Nt] + [Nt]
        judge = gpmjcore.LittleFourWindsJudge()
        last_tile = self.all_tiles[gpmjcore.Suits.WINDS][12]
        melds = []
        meld1 = gpmjcore.Meld()
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][0])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][2])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][1])
        melds.append(meld1)
        meld2 = gpmjcore.Meld()
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][0])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][1])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][2])
        melds.append(meld2)
        meld3 = gpmjcore.Meld()
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][4])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][5])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][6])
        meld3.b_stolen = True
        melds.append(meld3)
        meld4 = gpmjcore.Meld()
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][13])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][14])
        meld4.add_tile(last_tile)
        melds.append(meld4)
        eye = gpmjcore.Eye()
        eye.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][8])
        eye.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][9])
        win_hand = gpmjcore.WinHand(last_tile, True, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_meld(meld1)
        win_hand.append_meld(meld2)
        win_hand.append_meld(meld3)
        win_hand.append_meld(meld4)
        win_hand.append_eye(eye)
        result = judge.judge_hand(win_hand)
        self.assertEqual(result, True)

    def test_LittleFourWindsJudge_1(self):
        # [B1][B1][B1][Es][Es][Es][St][St][St][Ws][Ws][Rd][Rd] + [Rd]
        judge = gpmjcore.LittleFourWindsJudge()
        last_tile = self.all_tiles[gpmjcore.Suits.DRAGONS][11]
        melds = []
        meld1 = gpmjcore.Meld()
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][0])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][2])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][1])
        melds.append(meld1)
        meld2 = gpmjcore.Meld()
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][0])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][1])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][2])
        melds.append(meld2)
        meld3 = gpmjcore.Meld()
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][4])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][5])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][6])
        meld3.b_stolen = True
        melds.append(meld3)
        meld4 = gpmjcore.Meld()
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][10])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][9])
        meld4.add_tile(last_tile)
        melds.append(meld4)
        eye = gpmjcore.Eye()
        eye.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][8])
        eye.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][9])
        win_hand = gpmjcore.WinHand(last_tile, False, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_meld(meld1)
        win_hand.append_meld(meld2)
        win_hand.append_meld(meld3)
        win_hand.append_meld(meld4)
        win_hand.append_eye(eye)
        result = judge.judge_hand(win_hand)
        self.assertEqual(result, False)

    def test_BigThreeDragonsJudge_0(self):
        # [B1][B1][B1][D7][D8][D9][Wh][Wh][Wh][Gr][Gr][Rd][Rd] + [Rd]
        judge = gpmjcore.BigThreeDragonsJudge()
        last_tile = self.all_tiles[gpmjcore.Suits.DRAGONS][11]
        melds = []
        meld1 = gpmjcore.Meld()
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][0])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][2])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][1])
        melds.append(meld1)
        meld2 = gpmjcore.Meld()
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][27])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][28])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][33])
        melds.append(meld2)
        meld3 = gpmjcore.Meld()
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][0])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][1])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][2])
        meld3.b_stolen = True
        melds.append(meld3)
        meld4 = gpmjcore.Meld()
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][10])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][9])
        meld4.add_tile(last_tile)
        melds.append(meld4)
        eye = gpmjcore.Eye()
        eye.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][4])
        eye.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][5])
        win_hand = gpmjcore.WinHand(last_tile, False, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_meld(meld1)
        win_hand.append_meld(meld2)
        win_hand.append_meld(meld3)
        win_hand.append_meld(meld4)
        win_hand.append_eye(eye)
        result = judge.judge_hand(win_hand)
        self.assertEqual(result, False)

    def test_BigThreeDragonsJudge_1(self):
        # [B1][B1][D7][D8][D9][Wh][Wh][Wh][Gr][Gr][Gr][Rd][Rd] + [Rd]
        judge = gpmjcore.BigThreeDragonsJudge()
        last_tile = self.all_tiles[gpmjcore.Suits.DRAGONS][11]
        melds = []
        meld1 = gpmjcore.Meld()
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][0])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][2])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][1])
        melds.append(meld1)
        meld2 = gpmjcore.Meld()
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][27])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][28])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][33])
        melds.append(meld2)
        meld3 = gpmjcore.Meld()
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][4])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][6])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][5])
        meld3.b_stolen = True
        melds.append(meld3)
        meld4 = gpmjcore.Meld()
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][10])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][9])
        meld4.add_tile(last_tile)
        melds.append(meld4)
        eye = gpmjcore.Eye()
        eye.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][0])
        eye.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][1])
        win_hand = gpmjcore.WinHand(last_tile, True, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_meld(meld1)
        win_hand.append_meld(meld2)
        win_hand.append_meld(meld3)
        win_hand.append_meld(meld4)
        win_hand.append_eye(eye)
        result = judge.judge_hand(win_hand)
        self.assertEqual(result, True)

    def test_FourConcealedTripletsJudge_0(self):
        # [B2][B2][B2][D2][D2][D2][D7][D7][D7][C1][C1][C9][C9] + [C1]
        judge = gpmjcore.FourConcealedTripletsJudge()
        last_tile = self.all_tiles[gpmjcore.Suits.CHARACTERS][0]
        melds = []
        meld1 = gpmjcore.Meld()
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][5])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][4])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][6])
        melds.append(meld1)
        meld2 = gpmjcore.Meld()
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][4])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][5])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][6])
        melds.append(meld2)
        meld3 = gpmjcore.Meld()
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][24])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][25])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][26])
        melds.append(meld3)
        meld4 = gpmjcore.Meld()
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][1])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][2])
        meld4.add_tile(last_tile)
        melds.append(meld4)
        eye = gpmjcore.Eye()
        eye.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][34])
        eye.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][35])
        win_hand = gpmjcore.WinHand(last_tile, True, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_meld(meld1)
        win_hand.append_meld(meld2)
        win_hand.append_meld(meld3)
        win_hand.append_meld(meld4)
        win_hand.append_eye(eye)
        result = judge.judge_hand(win_hand)
        self.assertEqual(result, False)

    def test_FourConcealedTripletsJudge_1(self):
        # [B2][B2][B2][D2][D2][D2][D7][D7][D7][C1][C1][C9][C9] + [C1]
        judge = gpmjcore.FourConcealedTripletsJudge()
        last_tile = self.all_tiles[gpmjcore.Suits.CHARACTERS][0]
        melds = []
        meld1 = gpmjcore.Meld()
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][5])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][4])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][6])
        melds.append(meld1)
        meld2 = gpmjcore.Meld()
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][4])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][5])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][6])
        melds.append(meld2)
        meld3 = gpmjcore.Meld()
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][24])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][25])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][26])
        meld3.b_stolen = True
        melds.append(meld3)
        meld4 = gpmjcore.Meld()
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][1])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][2])
        meld4.add_tile(last_tile)
        melds.append(meld4)
        eye = gpmjcore.Eye()
        eye.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][34])
        eye.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][35])
        win_hand = gpmjcore.WinHand(last_tile, False, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_meld(meld1)
        win_hand.append_meld(meld2)
        win_hand.append_meld(meld3)
        win_hand.append_meld(meld4)
        win_hand.append_eye(eye)
        result = judge.judge_hand(win_hand)
        self.assertEqual(result, False)

    def test_FourConcealedTripletsJudge_2(self):
        # [B2][B2][B2][D2][D2][D2][D7][D7][D7][C1][C1][C9][C9] + [C1]
        judge = gpmjcore.FourConcealedTripletsJudge()
        last_tile = self.all_tiles[gpmjcore.Suits.CHARACTERS][0]
        melds = []
        meld1 = gpmjcore.Meld()
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][5])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][4])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][6])
        melds.append(meld1)
        meld2 = gpmjcore.Meld()
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][4])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][5])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][6])
        melds.append(meld2)
        meld3 = gpmjcore.Meld()
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][24])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][25])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][26])
        melds.append(meld3)
        meld4 = gpmjcore.Meld()
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][1])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][2])
        meld4.add_tile(last_tile)
        melds.append(meld4)
        eye = gpmjcore.Eye()
        eye.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][34])
        eye.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][35])
        win_hand = gpmjcore.WinHand(last_tile, False, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_meld(meld1)
        win_hand.append_meld(meld2)
        win_hand.append_meld(meld3)
        win_hand.append_meld(meld4)
        win_hand.append_eye(eye)
        result = judge.judge_hand(win_hand)
        self.assertEqual(result, True)

    def test_FourConcealedTripletsJudge_3(self):
        # [B2][B2][B2][D2][D2][D2][D7][D7][D7][C1][C9][C9][C9] + [C1]
        judge = gpmjcore.FourConcealedTripletsJudge()
        last_tile = self.all_tiles[gpmjcore.Suits.CHARACTERS][0]
        melds = []
        meld1 = gpmjcore.Meld()
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][5])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][4])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][6])
        melds.append(meld1)
        meld2 = gpmjcore.Meld()
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][4])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][5])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][6])
        melds.append(meld2)
        meld3 = gpmjcore.Meld()
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][24])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][25])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][26])
        melds.append(meld3)
        meld4 = gpmjcore.Meld()
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][35])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][34])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][33])
        melds.append(meld4)
        eye = gpmjcore.Eye()
        eye.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][1])
        eye.add_tile(last_tile)
        win_hand = gpmjcore.WinHand(last_tile, True, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_meld(meld1)
        win_hand.append_meld(meld2)
        win_hand.append_meld(meld3)
        win_hand.append_meld(meld4)
        win_hand.append_eye(eye)
        result = judge.judge_hand(win_hand)
        self.assertEqual(result, True)

    def test_FlushJudge_0(self):
        # [D1][D1][D2][D2][D3][D3][D3][D3][D7][D8][D9][Wh][Wh] + [Wh]
        judge = gpmjcore.FlushJudge()
        last_tile = self.all_tiles[gpmjcore.Suits.DRAGONS][0]
        melds = []
        meld1 = gpmjcore.Meld()
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][2])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][5])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][10])
        melds.append(meld1)
        meld2 = gpmjcore.Meld()
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][3])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][4])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][11])
        melds.append(meld2)
        meld3 = gpmjcore.Meld()
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][27])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][28])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][32])
        melds.append(meld3)
        meld4 = gpmjcore.Meld()
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][1])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][2])
        meld4.add_tile(last_tile)
        melds.append(meld4)
        eye = gpmjcore.Eye()
        eye.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][8])
        eye.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][9])
        win_hand = gpmjcore.WinHand(last_tile, False, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_meld(meld1)
        win_hand.append_meld(meld2)
        win_hand.append_meld(meld3)
        win_hand.append_meld(meld4)
        win_hand.append_eye(eye)
        result = judge.judge_hand(win_hand)
        self.assertEqual(result, False)

    def test_FlushJudge_1(self):
        # [D1][D1][D2][D2][D3][D3][D3][D3][D7][D7][D8][D8][D9] + [D6]
        judge = gpmjcore.FlushJudge()
        last_tile = self.all_tiles[gpmjcore.Suits.DOTS][20]
        melds = []
        meld1 = gpmjcore.Meld()
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][2])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][5])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][10])
        melds.append(meld1)
        meld2 = gpmjcore.Meld()
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][3])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][4])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][11])
        melds.append(meld2)
        meld3 = gpmjcore.Meld()
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][27])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][28])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][32])
        melds.append(meld3)
        meld4 = gpmjcore.Meld()
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][24])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][29])
        meld4.add_tile(last_tile)
        melds.append(meld4)
        eye = gpmjcore.Eye()
        eye.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][8])
        eye.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][9])
        win_hand = gpmjcore.WinHand(last_tile, False, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_meld(meld1)
        win_hand.append_meld(meld2)
        win_hand.append_meld(meld3)
        win_hand.append_meld(meld4)
        win_hand.append_eye(eye)
        result = judge.judge_hand(win_hand)
        self.assertEqual(result, True)

    def test_TwoSetOfIdenticalSequencesJudge_0(self):
        # [D4][D4][D5][D5][D6][D6][B1][B1][B2][B2][B3][Wh][Wh] + [B3]
        judge = gpmjcore.TwoSetOfIdenticalSequencesJudge()
        last_tile = self.all_tiles[gpmjcore.Suits.BAMBOO][9]
        melds = []
        meld1 = gpmjcore.Meld()
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][3])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][7])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][8])
        melds.append(meld1)
        meld2 = gpmjcore.Meld()
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][12])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][16])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][20])
        meld2.b_stolen = True
        melds.append(meld2)
        meld3 = gpmjcore.Meld()
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][13])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][17])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][21])
        melds.append(meld3)
        meld4 = gpmjcore.Meld()
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][2])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][6])
        meld4.add_tile(last_tile)
        melds.append(meld4)
        eye = gpmjcore.Eye()
        eye.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][2])
        eye.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][3])
        win_hand = gpmjcore.WinHand(last_tile, False, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_meld(meld1)
        win_hand.append_meld(meld2)
        win_hand.append_meld(meld3)
        win_hand.append_meld(meld4)
        win_hand.append_eye(eye)
        result = judge.judge_hand(win_hand)
        self.assertEqual(result, False)

    def test_TwoSetOfIdenticalSequencesJudge_1(self):
        # [D4][D4][D5][D5][D6][D6][B1][B1][B2][B2][B3][Wh][Wh] + [B3]
        judge = gpmjcore.TwoSetOfIdenticalSequencesJudge()
        last_tile = self.all_tiles[gpmjcore.Suits.BAMBOO][9]
        melds = []
        meld1 = gpmjcore.Meld()
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][3])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][7])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][8])
        melds.append(meld1)
        meld2 = gpmjcore.Meld()
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][12])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][16])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][20])
        melds.append(meld2)
        meld3 = gpmjcore.Meld()
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][13])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][17])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][21])
        melds.append(meld3)
        meld4 = gpmjcore.Meld()
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][2])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][6])
        meld4.add_tile(last_tile)
        melds.append(meld4)
        eye = gpmjcore.Eye()
        eye.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][2])
        eye.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][3])
        win_hand = gpmjcore.WinHand(last_tile, False, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_meld(meld1)
        win_hand.append_meld(meld2)
        win_hand.append_meld(meld3)
        win_hand.append_meld(meld4)
        win_hand.append_eye(eye)
        result = judge.judge_hand(win_hand)
        self.assertEqual(result, True)

    def test_TwoSetOfIdenticalSequencesJudge_2(self):
        # [D4][D4][D4][D4][D5][D5][D5][D5][D6][D6][D6][Wh][Wh] + [D6]
        judge = gpmjcore.TwoSetOfIdenticalSequencesJudge()
        last_tile = self.all_tiles[gpmjcore.Suits.DOTS][23]
        melds = []
        meld1 = gpmjcore.Meld()
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][12])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][16])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][20])
        melds.append(meld1)
        meld2 = gpmjcore.Meld()
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][13])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][17])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][21])
        melds.append(meld2)
        meld3 = gpmjcore.Meld()
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][14])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][18])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][22])
        melds.append(meld3)
        meld4 = gpmjcore.Meld()
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][15])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][19])
        meld4.add_tile(last_tile)
        melds.append(meld4)
        eye = gpmjcore.Eye()
        eye.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][2])
        eye.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][3])
        win_hand = gpmjcore.WinHand(last_tile, False, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_meld(meld1)
        win_hand.append_meld(meld2)
        win_hand.append_meld(meld3)
        win_hand.append_meld(meld4)
        win_hand.append_eye(eye)
        result = judge.judge_hand(win_hand)
        self.assertEqual(result, True)

    def test_HalfFlushJudge_0(self):
        # [D1][D1][D2][D2][D3][D3][D7][D8][D9][Wh][Wh][B3][B3] + [Wh]
        judge = gpmjcore.HalfFlushJudge()
        last_tile = self.all_tiles[gpmjcore.Suits.DRAGONS][0]
        melds = []
        meld1 = gpmjcore.Meld()
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][2])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][5])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][9])
        melds.append(meld1)
        meld2 = gpmjcore.Meld()
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][3])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][4])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][8])
        melds.append(meld2)
        meld3 = gpmjcore.Meld()
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][27])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][28])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][32])
        melds.append(meld3)
        meld4 = gpmjcore.Meld()
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][1])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][2])
        meld4.add_tile(last_tile)
        melds.append(meld4)
        eye = gpmjcore.Eye()
        eye.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][8])
        eye.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][9])
        win_hand = gpmjcore.WinHand(last_tile, False, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_meld(meld1)
        win_hand.append_meld(meld2)
        win_hand.append_meld(meld3)
        win_hand.append_meld(meld4)
        win_hand.append_eye(eye)
        result = judge.judge_hand(win_hand)
        self.assertEqual(result, False)

    def test_HalfFlushJudge_1(self):
        # [D1][D1][D2][D2][D3][D3][D7][D8][D9][Wh][Wh][Es][Es] + [Wh]
        judge = gpmjcore.HalfFlushJudge()
        last_tile = self.all_tiles[gpmjcore.Suits.DRAGONS][0]
        melds = []
        meld1 = gpmjcore.Meld()
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][2])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][5])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][9])
        melds.append(meld1)
        meld2 = gpmjcore.Meld()
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][3])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][4])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][8])
        melds.append(meld2)
        meld3 = gpmjcore.Meld()
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][27])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][28])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][32])
        melds.append(meld3)
        meld4 = gpmjcore.Meld()
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][1])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][2])
        meld4.add_tile(last_tile)
        melds.append(meld4)
        eye = gpmjcore.Eye()
        eye.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][0])
        eye.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][1])
        win_hand = gpmjcore.WinHand(last_tile, False, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_meld(meld1)
        win_hand.append_meld(meld2)
        win_hand.append_meld(meld3)
        win_hand.append_meld(meld4)
        win_hand.append_eye(eye)
        result = judge.judge_hand(win_hand)
        self.assertEqual(result, True)

    def test_TerminalInEachSetJudge_0(self):
        # [B1][B2][B3][D1][D2][D3][D7][D8][D9][C2][C3][C9][C9] + [C1]
        judge = gpmjcore.TerminalInEachSetJudge()
        last_tile = self.all_tiles[gpmjcore.Suits.CHARACTERS][0]
        melds = []
        meld1 = gpmjcore.Meld()
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][3])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][4])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][8])
        melds.append(meld1)
        meld2 = gpmjcore.Meld()
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][3])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][4])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][8])
        melds.append(meld2)
        meld3 = gpmjcore.Meld()
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][27])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][28])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][32])
        melds.append(meld3)
        meld4 = gpmjcore.Meld()
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][4])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][8])
        meld4.add_tile(last_tile)
        melds.append(meld4)
        eye = gpmjcore.Eye()
        eye.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][34])
        eye.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][35])
        win_hand = gpmjcore.WinHand(last_tile, False, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_meld(meld1)
        win_hand.append_meld(meld2)
        win_hand.append_meld(meld3)
        win_hand.append_meld(meld4)
        win_hand.append_eye(eye)
        result = judge.judge_hand(win_hand)
        self.assertEqual(result, True)

    def test_TerminalInEachSetJudge_1(self):
        # [B1][B2][B3][D1][D2][D3][D7][D8][D9][Es][Es][Wh][Wh] + [Es]
        judge = gpmjcore.TerminalInEachSetJudge()
        last_tile = self.all_tiles[gpmjcore.Suits.WINDS][2]
        melds = []
        meld1 = gpmjcore.Meld()
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][3])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][4])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][8])
        melds.append(meld1)
        meld2 = gpmjcore.Meld()
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][3])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][4])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][8])
        melds.append(meld2)
        meld3 = gpmjcore.Meld()
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][27])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][28])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][32])
        melds.append(meld3)
        meld4 = gpmjcore.Meld()
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][0])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][1])
        meld4.add_tile(last_tile)
        melds.append(meld4)
        eye = gpmjcore.Eye()
        eye.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][0])
        eye.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][1])
        win_hand = gpmjcore.WinHand(last_tile, False, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_meld(meld1)
        win_hand.append_meld(meld2)
        win_hand.append_meld(meld3)
        win_hand.append_meld(meld4)
        win_hand.append_eye(eye)
        result = judge.judge_hand(win_hand)
        self.assertEqual(result, False)

    def test_LittleThreeDragonsJudge_0(self):
        # [B1][B1][B1][D7][D8][D9][Wh][Wh][Wh][Es][Es][Rd][Rd] + [Rd]
        judge = gpmjcore.LittleThreeDragonsJudge()
        last_tile = self.all_tiles[gpmjcore.Suits.DRAGONS][11]
        melds = []
        meld1 = gpmjcore.Meld()
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][0])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][2])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][1])
        melds.append(meld1)
        meld2 = gpmjcore.Meld()
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][27])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][28])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][33])
        melds.append(meld2)
        meld3 = gpmjcore.Meld()
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][0])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][1])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][2])
        meld3.b_stolen = True
        melds.append(meld3)
        meld4 = gpmjcore.Meld()
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][10])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][9])
        meld4.add_tile(last_tile)
        melds.append(meld4)
        eye = gpmjcore.Eye()
        eye.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][0])
        eye.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][1])
        win_hand = gpmjcore.WinHand(last_tile, False, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_meld(meld1)
        win_hand.append_meld(meld2)
        win_hand.append_meld(meld3)
        win_hand.append_meld(meld4)
        win_hand.append_eye(eye)
        result = judge.judge_hand(win_hand)
        self.assertEqual(result, False)

    def test_LittleThreeDragonsJudge_1(self):
        # [B1][B1][B1][D7][D8][D9][Wh][Wh][Wh][Gr][Gr][Rd][Rd] + [Rd]
        judge = gpmjcore.LittleThreeDragonsJudge()
        last_tile = self.all_tiles[gpmjcore.Suits.DRAGONS][11]
        melds = []
        meld1 = gpmjcore.Meld()
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][0])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][2])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][1])
        melds.append(meld1)
        meld2 = gpmjcore.Meld()
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][27])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][28])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][33])
        melds.append(meld2)
        meld3 = gpmjcore.Meld()
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][0])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][1])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][2])
        meld3.b_stolen = True
        melds.append(meld3)
        meld4 = gpmjcore.Meld()
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][10])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][9])
        meld4.add_tile(last_tile)
        melds.append(meld4)
        eye = gpmjcore.Eye()
        eye.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][4])
        eye.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][5])
        win_hand = gpmjcore.WinHand(last_tile, False, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_meld(meld1)
        win_hand.append_meld(meld2)
        win_hand.append_meld(meld3)
        win_hand.append_meld(meld4)
        win_hand.append_eye(eye)
        result = judge.judge_hand(win_hand)
        self.assertEqual(result, True)

    def test_AllTerminalsAndHonorsJudge_0(self):
        # [B1][B1][B1][D7][D8][D9][Wh][Wh][Wh][C1][C1][Es][Es] + [C1]
        judge = gpmjcore.AllTerminalsAndHonorsJudge()
        last_tile = self.all_tiles[gpmjcore.Suits.CHARACTERS][0]
        melds = []
        meld1 = gpmjcore.Meld()
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][0])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][2])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][1])
        melds.append(meld1)
        meld2 = gpmjcore.Meld()
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][27])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][28])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][33])
        melds.append(meld2)
        meld3 = gpmjcore.Meld()
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][0])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][1])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][2])
        meld3.b_stolen = True
        melds.append(meld3)
        meld4 = gpmjcore.Meld()
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][1])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][2])
        meld4.add_tile(last_tile)
        melds.append(meld4)
        eye = gpmjcore.Eye()
        eye.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][0])
        eye.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][1])
        win_hand = gpmjcore.WinHand(last_tile, False, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_meld(meld1)
        win_hand.append_meld(meld2)
        win_hand.append_meld(meld3)
        win_hand.append_meld(meld4)
        win_hand.append_eye(eye)
        result = judge.judge_hand(win_hand)
        self.assertEqual(result, False)

    def test_AllTerminalsAndHonorsJudge_1(self):
        # [B1][B1][B1][D9][D9][D9][Wh][Wh][Wh][C1][C1][Es][Es] + [C1]
        judge = gpmjcore.AllTerminalsAndHonorsJudge()
        last_tile = self.all_tiles[gpmjcore.Suits.CHARACTERS][0]
        melds = []
        meld1 = gpmjcore.Meld()
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][0])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][2])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][1])
        melds.append(meld1)
        meld2 = gpmjcore.Meld()
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][32])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][34])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][33])
        melds.append(meld2)
        meld3 = gpmjcore.Meld()
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][0])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][1])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][2])
        meld3.b_stolen = True
        melds.append(meld3)
        meld4 = gpmjcore.Meld()
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][1])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][2])
        meld4.add_tile(last_tile)
        melds.append(meld4)
        eye = gpmjcore.Eye()
        eye.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][0])
        eye.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][1])
        win_hand = gpmjcore.WinHand(last_tile, False, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_meld(meld1)
        win_hand.append_meld(meld2)
        win_hand.append_meld(meld3)
        win_hand.append_meld(meld4)
        win_hand.append_eye(eye)
        result = judge.judge_hand(win_hand)
        self.assertEqual(result, True)

    def test_ThreeKongsJudge_0(self):
        # [B2][B2][B2][B2][D3][D3][D3][D3][D6][D6][D6][C2][C2][C7][C8] + [C9]
        judge = gpmjcore.ThreeKongsJudge()
        last_tile = self.all_tiles[gpmjcore.Suits.CHARACTERS][33]
        melds = []
        meld1 = gpmjcore.Meld()
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][4])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][5])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][6])
        meld1.make_kong(self.all_tiles[gpmjcore.Suits.BAMBOO][7])
        melds.append(meld1)
        meld2 = gpmjcore.Meld()
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][4])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][5])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][6])
        meld2.make_kong(self.all_tiles[gpmjcore.Suits.DOTS][7])
        melds.append(meld2)
        meld3 = gpmjcore.Meld()
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][20])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][21])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][22])
        meld3.b_stolen = True
        melds.append(meld3)
        meld4 = gpmjcore.Meld()
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][27])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][28])
        meld4.add_tile(last_tile)
        melds.append(meld4)
        eye = gpmjcore.Eye()
        eye.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][4])
        eye.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][5])
        win_hand = gpmjcore.WinHand(last_tile, True, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_meld(meld1)
        win_hand.append_meld(meld2)
        win_hand.append_meld(meld3)
        win_hand.append_meld(meld4)
        win_hand.append_eye(eye)
        result = judge.judge_hand(win_hand)
        self.assertEqual(result, False)

    def test_ThreeKongsJudge_1(self):
        # [B2][B2][B2][B2][D3][D3][D3][D3][D6][D6][D6][D6][C2][C2][C7][C8] + [C9]
        judge = gpmjcore.ThreeKongsJudge()
        last_tile = self.all_tiles[gpmjcore.Suits.CHARACTERS][33]
        melds = []
        meld1 = gpmjcore.Meld()
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][4])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][5])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][6])
        meld1.make_kong(self.all_tiles[gpmjcore.Suits.BAMBOO][7])
        melds.append(meld1)
        meld2 = gpmjcore.Meld()
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][4])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][5])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][6])
        meld2.make_kong(self.all_tiles[gpmjcore.Suits.DOTS][7])
        melds.append(meld2)
        meld3 = gpmjcore.Meld()
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][20])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][21])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][22])
        meld3.b_stolen = True
        meld3.make_kong(self.all_tiles[gpmjcore.Suits.DOTS][23])
        melds.append(meld3)
        meld4 = gpmjcore.Meld()
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][27])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][28])
        meld4.add_tile(last_tile)
        melds.append(meld4)
        eye = gpmjcore.Eye()
        eye.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][4])
        eye.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][5])
        win_hand = gpmjcore.WinHand(last_tile, True, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_meld(meld1)
        win_hand.append_meld(meld2)
        win_hand.append_meld(meld3)
        win_hand.append_meld(meld4)
        win_hand.append_eye(eye)
        result = judge.judge_hand(win_hand)
        self.assertEqual(result, True)

    def test_ThreeColorTripletsJudge_0(self):
        # [B2][B2][B2][D2][D2][D2][D6][D7][D8][C2][C2][C9][C9] + [C9]
        judge = gpmjcore.ThreeColorTripletsJudge()
        last_tile = self.all_tiles[gpmjcore.Suits.CHARACTERS][33]
        melds = []
        meld1 = gpmjcore.Meld()
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][4])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][5])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][6])
        melds.append(meld1)
        meld2 = gpmjcore.Meld()
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][4])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][5])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][6])
        melds.append(meld2)
        meld3 = gpmjcore.Meld()
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][24])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][23])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][28])
        meld3.b_stolen = True
        melds.append(meld3)
        meld4 = gpmjcore.Meld()
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][34])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][35])
        meld4.add_tile(last_tile)
        melds.append(meld4)
        eye = gpmjcore.Eye()
        eye.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][4])
        eye.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][5])
        win_hand = gpmjcore.WinHand(last_tile, True, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_meld(meld1)
        win_hand.append_meld(meld2)
        win_hand.append_meld(meld3)
        win_hand.append_meld(meld4)
        win_hand.append_eye(eye)
        result = judge.judge_hand(win_hand)
        self.assertEqual(result, False)

    def test_ThreeColorTripletsJudge_1(self):
        # [B2][B2][B2][D2][D2][D2][D6][D7][D8][C2][C2][C9][C9] + [C2]
        judge = gpmjcore.ThreeColorTripletsJudge()
        last_tile = self.all_tiles[gpmjcore.Suits.CHARACTERS][5]
        melds = []
        meld1 = gpmjcore.Meld()
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][4])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][5])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][6])
        melds.append(meld1)
        meld2 = gpmjcore.Meld()
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][4])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][5])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][6])
        melds.append(meld2)
        meld3 = gpmjcore.Meld()
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][24])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][23])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][28])
        meld3.b_stolen = True
        melds.append(meld3)
        meld4 = gpmjcore.Meld()
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][4])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][6])
        meld4.add_tile(last_tile)
        melds.append(meld4)
        eye = gpmjcore.Eye()
        eye.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][34])
        eye.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][35])
        win_hand = gpmjcore.WinHand(last_tile, True, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_meld(meld1)
        win_hand.append_meld(meld2)
        win_hand.append_meld(meld3)
        win_hand.append_meld(meld4)
        win_hand.append_eye(eye)
        result = judge.judge_hand(win_hand)
        self.assertEqual(result, True)

    def test_ThreeClosedTripletsJudge_0(self):
        # [B1][B2][B3][D2][D2][D2][D7][D7][D7][C1][C1][C9][C9] + [C1]
        judge = gpmjcore.ThreeClosedTripletsJudge()
        last_tile = self.all_tiles[gpmjcore.Suits.CHARACTERS][0]
        melds = []
        meld1 = gpmjcore.Meld()
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][3])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][4])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][8])
        melds.append(meld1)
        meld2 = gpmjcore.Meld()
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][4])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][5])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][6])
        melds.append(meld2)
        meld3 = gpmjcore.Meld()
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][24])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][25])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][26])
        melds.append(meld3)
        meld4 = gpmjcore.Meld()
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][1])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][2])
        meld4.add_tile(last_tile)
        melds.append(meld4)
        eye = gpmjcore.Eye()
        eye.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][34])
        eye.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][35])
        win_hand = gpmjcore.WinHand(last_tile, True, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_meld(meld1)
        win_hand.append_meld(meld2)
        win_hand.append_meld(meld3)
        win_hand.append_meld(meld4)
        win_hand.append_eye(eye)
        result = judge.judge_hand(win_hand)
        self.assertEqual(result, False)

    def test_ThreeClosedTripletsJudge_1(self):
        # [B1][B2][B3][D2][D2][D2][D7][D7][D7][C1][C1][C9][C9] + [C1]
        judge = gpmjcore.ThreeClosedTripletsJudge()
        last_tile = self.all_tiles[gpmjcore.Suits.CHARACTERS][0]
        melds = []
        meld1 = gpmjcore.Meld()
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][3])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][4])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][8])
        melds.append(meld1)
        meld2 = gpmjcore.Meld()
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][4])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][5])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][6])
        melds.append(meld2)
        meld3 = gpmjcore.Meld()
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][24])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][25])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][26])
        meld3.b_stolen = True
        melds.append(meld3)
        meld4 = gpmjcore.Meld()
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][1])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][2])
        meld4.add_tile(last_tile)
        melds.append(meld4)
        eye = gpmjcore.Eye()
        eye.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][34])
        eye.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][35])
        win_hand = gpmjcore.WinHand(last_tile, False, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_meld(meld1)
        win_hand.append_meld(meld2)
        win_hand.append_meld(meld3)
        win_hand.append_meld(meld4)
        win_hand.append_eye(eye)
        result = judge.judge_hand(win_hand)
        self.assertEqual(result, False)

    def test_ThreeClosedTripletsJudge_2(self):
        # [B1][B2][B3][D2][D2][D2][D7][D7][D7][C1][C1][C9][C9] + [C1]
        judge = gpmjcore.ThreeClosedTripletsJudge()
        last_tile = self.all_tiles[gpmjcore.Suits.CHARACTERS][0]
        melds = []
        meld1 = gpmjcore.Meld()
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][3])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][4])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][8])
        melds.append(meld1)
        meld2 = gpmjcore.Meld()
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][4])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][5])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][6])
        melds.append(meld2)
        meld3 = gpmjcore.Meld()
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][24])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][25])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][26])
        melds.append(meld3)
        meld4 = gpmjcore.Meld()
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][1])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][2])
        meld4.add_tile(last_tile)
        melds.append(meld4)
        eye = gpmjcore.Eye()
        eye.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][34])
        eye.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][35])
        win_hand = gpmjcore.WinHand(last_tile, False, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_meld(meld1)
        win_hand.append_meld(meld2)
        win_hand.append_meld(meld3)
        win_hand.append_meld(meld4)
        win_hand.append_eye(eye)
        result = judge.judge_hand(win_hand)
        self.assertEqual(result, True)

    def test_AllTripletHandJudge_0(self):
        # [B1][B2][B3][D2][D2][D2][D7][D7][D7][C1][C1][C9][C9] + [C1]
        judge = gpmjcore.AllTripletHandJudge()
        last_tile = self.all_tiles[gpmjcore.Suits.CHARACTERS][0]
        melds = []
        meld1 = gpmjcore.Meld()
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][3])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][4])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][8])
        melds.append(meld1)
        meld2 = gpmjcore.Meld()
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][4])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][5])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][6])
        melds.append(meld2)
        meld3 = gpmjcore.Meld()
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][24])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][25])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][26])
        melds.append(meld3)
        meld4 = gpmjcore.Meld()
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][1])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][2])
        meld4.add_tile(last_tile)
        meld4.b_stolen = True
        melds.append(meld4)
        eye = gpmjcore.Eye()
        eye.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][34])
        eye.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][35])
        win_hand = gpmjcore.WinHand(last_tile, False, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_meld(meld1)
        win_hand.append_meld(meld2)
        win_hand.append_meld(meld3)
        win_hand.append_meld(meld4)
        win_hand.append_eye(eye)
        result = judge.judge_hand(win_hand)
        self.assertEqual(result, False)

    def test_AllTripletHandJudge_1(self):
        # [B3][B3][B3][D2][D2][D2][D7][D7][D7][C1][C1][C9][C9] + [C1]
        judge = gpmjcore.AllTripletHandJudge()
        last_tile = self.all_tiles[gpmjcore.Suits.CHARACTERS][0]
        melds = []
        meld1 = gpmjcore.Meld()
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][9])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][10])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][8])
        melds.append(meld1)
        meld2 = gpmjcore.Meld()
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][4])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][5])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][6])
        melds.append(meld2)
        meld3 = gpmjcore.Meld()
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][24])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][25])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][26])
        melds.append(meld3)
        meld4 = gpmjcore.Meld()
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][1])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][2])
        meld4.add_tile(last_tile)
        meld4.b_stolen = True
        melds.append(meld4)
        eye = gpmjcore.Eye()
        eye.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][34])
        eye.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][35])
        win_hand = gpmjcore.WinHand(last_tile, False, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_meld(meld1)
        win_hand.append_meld(meld2)
        win_hand.append_meld(meld3)
        win_hand.append_meld(meld4)
        win_hand.append_eye(eye)
        result = judge.judge_hand(win_hand)
        self.assertEqual(result, True)

    def test_TerminalOrHonorInEachSetJudge_0(self):
        # [B1][B2][B3][D1][D2][D3][D7][D8][D9][C2][C3][C9][C9] + [C1]
        judge = gpmjcore.TerminalOrHonorInEachSetJudge()
        last_tile = self.all_tiles[gpmjcore.Suits.CHARACTERS][0]
        melds = []
        meld1 = gpmjcore.Meld()
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][3])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][4])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][8])
        melds.append(meld1)
        meld2 = gpmjcore.Meld()
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][3])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][4])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][8])
        melds.append(meld2)
        meld3 = gpmjcore.Meld()
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][27])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][28])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][32])
        melds.append(meld3)
        meld4 = gpmjcore.Meld()
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][4])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][8])
        meld4.add_tile(last_tile)
        melds.append(meld4)
        eye = gpmjcore.Eye()
        eye.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][34])
        eye.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][35])
        win_hand = gpmjcore.WinHand(last_tile, False, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_meld(meld1)
        win_hand.append_meld(meld2)
        win_hand.append_meld(meld3)
        win_hand.append_meld(meld4)
        win_hand.append_eye(eye)
        result = judge.judge_hand(win_hand)
        self.assertEqual(result, False)

    def test_TerminalOrHonorInEachSetJudge_1(self):
        # [B2][B3][B4][D1][D2][D3][D7][D8][D9][Es][Es][Wh][Wh] + [Es]
        judge = gpmjcore.TerminalOrHonorInEachSetJudge()
        last_tile = self.all_tiles[gpmjcore.Suits.WINDS][2]
        melds = []
        meld1 = gpmjcore.Meld()
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][12])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][4])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][8])
        melds.append(meld1)
        meld2 = gpmjcore.Meld()
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][3])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][4])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][8])
        melds.append(meld2)
        meld3 = gpmjcore.Meld()
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][27])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][28])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][32])
        melds.append(meld3)
        meld4 = gpmjcore.Meld()
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][0])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][1])
        meld4.add_tile(last_tile)
        melds.append(meld4)
        eye = gpmjcore.Eye()
        eye.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][0])
        eye.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][1])
        win_hand = gpmjcore.WinHand(last_tile, False, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_meld(meld1)
        win_hand.append_meld(meld2)
        win_hand.append_meld(meld3)
        win_hand.append_meld(meld4)
        win_hand.append_eye(eye)
        result = judge.judge_hand(win_hand)
        self.assertEqual(result, False)

    def test_TerminalOrHonorInEachSetJudge_2(self):
        # [B1][B2][B3][D1][D2][D3][D7][D8][D9][Es][Es][Wh][Wh] + [Es]
        judge = gpmjcore.TerminalOrHonorInEachSetJudge()
        last_tile = self.all_tiles[gpmjcore.Suits.WINDS][2]
        melds = []
        meld1 = gpmjcore.Meld()
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][3])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][4])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][8])
        melds.append(meld1)
        meld2 = gpmjcore.Meld()
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][3])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][4])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][8])
        melds.append(meld2)
        meld3 = gpmjcore.Meld()
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][27])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][28])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][32])
        melds.append(meld3)
        meld4 = gpmjcore.Meld()
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][0])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][1])
        meld4.add_tile(last_tile)
        melds.append(meld4)
        eye = gpmjcore.Eye()
        eye.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][0])
        eye.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][1])
        win_hand = gpmjcore.WinHand(last_tile, False, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_meld(meld1)
        win_hand.append_meld(meld2)
        win_hand.append_meld(meld3)
        win_hand.append_meld(meld4)
        win_hand.append_eye(eye)
        result = judge.judge_hand(win_hand)
        self.assertEqual(result, True)

    def test_StraightJudge_0(self):
        # [B2][B3][B4][D1][D2][D3][D4][D5][D6][D7][D8][Wh][Wh] + [D6]
        judge = gpmjcore.StraightJudge()
        last_tile = self.all_tiles[gpmjcore.Suits.DOTS][22]
        melds = []
        meld1 = gpmjcore.Meld()
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][7])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][8])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][12])
        melds.append(meld1)
        meld2 = gpmjcore.Meld()
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][3])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][4])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][8])
        melds.append(meld2)
        meld3 = gpmjcore.Meld()
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][15])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][17])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][21])
        melds.append(meld3)
        meld4 = gpmjcore.Meld()
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][27])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][28])
        meld4.add_tile(last_tile)
        melds.append(meld4)
        eye = gpmjcore.Eye()
        eye.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][0])
        eye.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][1])
        win_hand = gpmjcore.WinHand(last_tile, False, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_meld(meld1)
        win_hand.append_meld(meld2)
        win_hand.append_meld(meld3)
        win_hand.append_meld(meld4)
        win_hand.append_eye(eye)
        result = judge.judge_hand(win_hand)
        self.assertEqual(result, False)

    def test_StraightJudge_1(self):
        # [B2][B3][B4][D1][D2][D3][D4][D5][D6][D7][D9][Wh][Wh] + [D8]
        judge = gpmjcore.StraightJudge()
        last_tile = self.all_tiles[gpmjcore.Suits.DOTS][28]
        melds = []
        meld1 = gpmjcore.Meld()
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][7])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][8])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][12])
        melds.append(meld1)
        meld2 = gpmjcore.Meld()
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][3])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][4])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][8])
        melds.append(meld2)
        meld3 = gpmjcore.Meld()
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][15])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][17])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][21])
        melds.append(meld3)
        meld4 = gpmjcore.Meld()
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][27])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][32])
        meld4.add_tile(last_tile)
        melds.append(meld4)
        eye = gpmjcore.Eye()
        eye.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][0])
        eye.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][1])
        win_hand = gpmjcore.WinHand(last_tile, False, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_meld(meld1)
        win_hand.append_meld(meld2)
        win_hand.append_meld(meld3)
        win_hand.append_meld(meld4)
        win_hand.append_eye(eye)
        result = judge.judge_hand(win_hand)
        self.assertEqual(result, True)

    def test_ThreeColorStraightJudge_0(self):
        # [D4][D4][D5][D5][D6][D6][B4][B5][B6][C4][C5][Wh][Wh] + [C3]
        judge = gpmjcore.ThreeColorStraightJudge()
        last_tile = self.all_tiles[gpmjcore.Suits.CHARACTERS][10]
        melds = []
        meld1 = gpmjcore.Meld()
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][15])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][16])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][20])
        melds.append(meld1)
        meld2 = gpmjcore.Meld()
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][14])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][16])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][20])
        melds.append(meld2)
        meld3 = gpmjcore.Meld()
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][15])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][17])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][21])
        melds.append(meld3)
        meld4 = gpmjcore.Meld()
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][15])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][16])
        meld4.add_tile(last_tile)
        melds.append(meld4)
        eye = gpmjcore.Eye()
        eye.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][0])
        eye.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][1])
        win_hand = gpmjcore.WinHand(last_tile, False, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_meld(meld1)
        win_hand.append_meld(meld2)
        win_hand.append_meld(meld3)
        win_hand.append_meld(meld4)
        win_hand.append_eye(eye)
        result = judge.judge_hand(win_hand)
        self.assertEqual(result, False)

    def test_ThreeColorStraightJudge_1(self):
        # [D4][D4][D5][D5][D6][D6][B4][B5][B6][C4][C5][Wh][Wh] + [C6]
        judge = gpmjcore.ThreeColorStraightJudge()
        last_tile = self.all_tiles[gpmjcore.Suits.CHARACTERS][20]
        melds = []
        meld1 = gpmjcore.Meld()
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][15])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][16])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][20])
        melds.append(meld1)
        meld2 = gpmjcore.Meld()
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][14])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][16])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][20])
        melds.append(meld2)
        meld3 = gpmjcore.Meld()
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][15])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][17])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][21])
        melds.append(meld3)
        meld4 = gpmjcore.Meld()
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][15])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][16])
        meld4.add_tile(last_tile)
        melds.append(meld4)
        eye = gpmjcore.Eye()
        eye.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][0])
        eye.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][1])
        win_hand = gpmjcore.WinHand(last_tile, False, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_meld(meld1)
        win_hand.append_meld(meld2)
        win_hand.append_meld(meld3)
        win_hand.append_meld(meld4)
        win_hand.append_eye(eye)
        result = judge.judge_hand(win_hand)
        self.assertEqual(result, True)

    def test_AllSimplesJudge_0(self):
        # [D4][D4][D5][D5][D6][D6][B2][B3][B4][C4][C5][Wh][Wh] + [C6]
        judge = gpmjcore.AllSimplesJudge()
        last_tile = self.all_tiles[gpmjcore.Suits.CHARACTERS][20]
        melds = []
        meld1 = gpmjcore.Meld()
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][12])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][7])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][11])
        melds.append(meld1)
        meld2 = gpmjcore.Meld()
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][14])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][16])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][20])
        melds.append(meld2)
        meld3 = gpmjcore.Meld()
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][15])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][17])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][21])
        melds.append(meld3)
        meld4 = gpmjcore.Meld()
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][15])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][16])
        meld4.add_tile(last_tile)
        melds.append(meld4)
        eye = gpmjcore.Eye()
        eye.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][0])
        eye.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][1])
        win_hand = gpmjcore.WinHand(last_tile, False, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_meld(meld1)
        win_hand.append_meld(meld2)
        win_hand.append_meld(meld3)
        win_hand.append_meld(meld4)
        win_hand.append_eye(eye)
        result = judge.judge_hand(win_hand)
        self.assertEqual(result, False)

    def test_AllSimplesJudge_1(self):
        # [D4][D4][D5][D5][D6][D6][B2][B3][B4][C4][C5][C6][C6] + [C6]
        judge = gpmjcore.AllSimplesJudge()
        last_tile = self.all_tiles[gpmjcore.Suits.CHARACTERS][20]
        melds = []
        meld1 = gpmjcore.Meld()
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][12])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][7])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][11])
        melds.append(meld1)
        meld2 = gpmjcore.Meld()
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][14])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][16])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][20])
        melds.append(meld2)
        meld3 = gpmjcore.Meld()
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][15])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][17])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][21])
        melds.append(meld3)
        meld4 = gpmjcore.Meld()
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][15])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][16])
        meld4.add_tile(last_tile)
        melds.append(meld4)
        eye = gpmjcore.Eye()
        eye.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][21])
        eye.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][22])
        win_hand = gpmjcore.WinHand(last_tile, False, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_meld(meld1)
        win_hand.append_meld(meld2)
        win_hand.append_meld(meld3)
        win_hand.append_meld(meld4)
        win_hand.append_eye(eye)
        result = judge.judge_hand(win_hand)
        self.assertEqual(result, True)
    
    def test_OneSetOfIdenticalSequencesJudge_0(self):
        # [D4][D4][D5][D5][D6][D6][B1][B2][B3][C4][C5][Wh][Wh] + [C6]
        judge = gpmjcore.OneSetOfIdenticalSequencesJudge()
        last_tile = self.all_tiles[gpmjcore.Suits.CHARACTERS][20]
        melds = []
        meld1 = gpmjcore.Meld()
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][3])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][7])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][11])
        melds.append(meld1)
        meld2 = gpmjcore.Meld()
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][14])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][16])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][20])
        melds.append(meld2)
        meld3 = gpmjcore.Meld()
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][15])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][17])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][21])
        melds.append(meld3)
        meld4 = gpmjcore.Meld()
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][15])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][16])
        meld4.add_tile(last_tile)
        melds.append(meld4)
        eye = gpmjcore.Eye()
        eye.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][2])
        eye.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][3])
        win_hand = gpmjcore.WinHand(last_tile, False, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_meld(meld1)
        win_hand.append_meld(meld2)
        win_hand.append_meld(meld3)
        win_hand.append_meld(meld4)
        win_hand.append_eye(eye)
        result = judge.judge_hand(win_hand)
        self.assertEqual(result, True)

    def test_OneSetOfIdenticalSequencesJudge_1(self):
        # [D4][D4][D5][D5][D6][D6][D6][B1][B2][B3][Wh][Wh][Wh] + [D3]
        judge = gpmjcore.OneSetOfIdenticalSequencesJudge()
        last_tile = self.all_tiles[gpmjcore.Suits.DOTS][9]
        melds = []
        meld1 = gpmjcore.Meld()
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][3])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][7])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][11])
        melds.append(meld1)
        meld2 = gpmjcore.Meld()
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][1])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][2])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][3])
        melds.append(meld2)
        meld3 = gpmjcore.Meld()
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][14])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][17])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][22])
        melds.append(meld3)
        meld4 = gpmjcore.Meld()
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][15])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][16])
        meld4.add_tile(last_tile)
        melds.append(meld4)
        eye = gpmjcore.Eye()
        eye.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][20])
        eye.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][21])
        win_hand = gpmjcore.WinHand(last_tile, False, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_meld(meld1)
        win_hand.append_meld(meld2)
        win_hand.append_meld(meld3)
        win_hand.append_meld(meld4)
        win_hand.append_eye(eye)
        result = judge.judge_hand(win_hand)
        self.assertEqual(result, False)

    def test_OneSetOfIdenticalSequencesJudge_2(self):
        # [D4][D4][D5][D5][D6][D6][B1][B1][B2][B2][B3][Wh][Wh] + [B3]
        judge = gpmjcore.OneSetOfIdenticalSequencesJudge()
        last_tile = self.all_tiles[gpmjcore.Suits.BAMBOO][9]
        melds = []
        meld1 = gpmjcore.Meld()
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][3])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][7])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][8])
        melds.append(meld1)
        meld2 = gpmjcore.Meld()
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][12])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][16])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][20])
        melds.append(meld2)
        meld3 = gpmjcore.Meld()
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][13])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][17])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][21])
        melds.append(meld3)
        meld4 = gpmjcore.Meld()
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][2])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][6])
        meld4.add_tile(last_tile)
        melds.append(meld4)
        eye = gpmjcore.Eye()
        eye.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][2])
        eye.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][3])
        win_hand = gpmjcore.WinHand(last_tile, False, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_meld(meld1)
        win_hand.append_meld(meld2)
        win_hand.append_meld(meld3)
        win_hand.append_meld(meld4)
        win_hand.append_eye(eye)
        result = judge.judge_hand(win_hand)
        self.assertEqual(result, False)

    def test_NoPointsHandJudge_0(self):
        # [D4][D4][D5][D5][D6][D6][B1][B2][B3][C4][C5][Wh][Wh] + [C6]
        judge = gpmjcore.NoPointsHandJudge()
        last_tile = self.all_tiles[gpmjcore.Suits.CHARACTERS][20]
        melds = []
        meld1 = gpmjcore.Meld()
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][3])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][7])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][11])
        melds.append(meld1)
        meld2 = gpmjcore.Meld()
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][14])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][16])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][20])
        melds.append(meld2)
        meld3 = gpmjcore.Meld()
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][15])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][17])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][21])
        melds.append(meld3)
        meld4 = gpmjcore.Meld()
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][15])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][16])
        meld4.add_tile(last_tile)
        melds.append(meld4)
        eye = gpmjcore.Eye()
        eye.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][2])
        eye.add_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][3])
        win_hand = gpmjcore.WinHand(last_tile, False, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_meld(meld1)
        win_hand.append_meld(meld2)
        win_hand.append_meld(meld3)
        win_hand.append_meld(meld4)
        win_hand.append_eye(eye)
        result = judge.judge_hand(win_hand)
        self.assertEqual(result, False)

    def test_NoPointsHandJudge_1(self):
        # [D4][D4][D5][D5][D6][D6][B1][B2][B3][C4][C5][Ws][Ws] + [C6]
        judge = gpmjcore.NoPointsHandJudge()
        last_tile = self.all_tiles[gpmjcore.Suits.CHARACTERS][20]
        melds = []
        meld1 = gpmjcore.Meld()
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][3])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][7])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][11])
        melds.append(meld1)
        meld2 = gpmjcore.Meld()
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][14])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][16])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][20])
        melds.append(meld2)
        meld3 = gpmjcore.Meld()
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][15])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][17])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][21])
        melds.append(meld3)
        meld4 = gpmjcore.Meld()
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][15])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][16])
        meld4.add_tile(last_tile)
        melds.append(meld4)
        eye = gpmjcore.Eye()
        eye.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][8])
        eye.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][9])
        win_hand = gpmjcore.WinHand(last_tile, False, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_meld(meld1)
        win_hand.append_meld(meld2)
        win_hand.append_meld(meld3)
        win_hand.append_meld(meld4)
        win_hand.append_eye(eye)
        result = judge.judge_hand(win_hand)
        self.assertEqual(result, True)

    def test_NoPointsHandJudge_2(self):
        # [D4][D4][D5][D5][D6][D6][B1][B2][B3][C4][C6][Ws][Ws] + [C5]
        judge = gpmjcore.NoPointsHandJudge()
        last_tile = self.all_tiles[gpmjcore.Suits.CHARACTERS][16]
        melds = []
        meld1 = gpmjcore.Meld()
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][3])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][7])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][11])
        melds.append(meld1)
        meld2 = gpmjcore.Meld()
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][14])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][16])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][20])
        melds.append(meld2)
        meld3 = gpmjcore.Meld()
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][15])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][17])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][21])
        melds.append(meld3)
        meld4 = gpmjcore.Meld()
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][15])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][20])
        meld4.add_tile(last_tile)
        melds.append(meld4)
        eye = gpmjcore.Eye()
        eye.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][8])
        eye.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][9])
        win_hand = gpmjcore.WinHand(last_tile, False, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_meld(meld1)
        win_hand.append_meld(meld2)
        win_hand.append_meld(meld3)
        win_hand.append_meld(meld4)
        win_hand.append_eye(eye)
        result = judge.judge_hand(win_hand)
        self.assertEqual(result, False)

    def test_NoPointsHandJudge_3(self):
        # [D4][D4][D5][D5][D6][D6][B1][B2][B3][C8][C9][Ws][Ws] + [C7]
        judge = gpmjcore.NoPointsHandJudge()
        last_tile = self.all_tiles[gpmjcore.Suits.CHARACTERS][27]
        melds = []
        meld1 = gpmjcore.Meld()
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][3])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][7])
        meld1.add_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][11])
        melds.append(meld1)
        meld2 = gpmjcore.Meld()
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][14])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][16])
        meld2.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][20])
        melds.append(meld2)
        meld3 = gpmjcore.Meld()
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][15])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][17])
        meld3.add_tile(self.all_tiles[gpmjcore.Suits.DOTS][21])
        melds.append(meld3)
        meld4 = gpmjcore.Meld()
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][28])
        meld4.add_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][32])
        meld4.add_tile(last_tile)
        melds.append(meld4)
        eye = gpmjcore.Eye()
        eye.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][8])
        eye.add_tile(self.all_tiles[gpmjcore.Suits.WINDS][9])
        win_hand = gpmjcore.WinHand(last_tile, False, gpmjcore.Winds.EAST, gpmjcore.Winds.EAST)
        win_hand.append_meld(meld1)
        win_hand.append_meld(meld2)
        win_hand.append_meld(meld3)
        win_hand.append_meld(meld4)
        win_hand.append_eye(eye)
        result = judge.judge_hand(win_hand)
        self.assertEqual(result, False)

    def test_expose_meld_0(self):
        # [D4][D4][D5][D5][D6][D6][B1][B2][B3][C4][C5][Wh][Wh]
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][2])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][3])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][3])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][7])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][11])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DOTS][14])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DOTS][15])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DOTS][16])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DOTS][17])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DOTS][22])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DOTS][23])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][15])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][16])
        meld = gpmjcore.Meld()
        meld.tiles.append(self.all_tiles[gpmjcore.Suits.CHARACTERS][14])
        meld.tiles.append(self.all_tiles[gpmjcore.Suits.CHARACTERS][16])
        discarded_tile = self.all_tiles[gpmjcore.Suits.CHARACTERS][20]
        meld.tiles.append(discarded_tile)
        result = self.hand.steal_tile(meld, discarded_tile)
        self.assertEqual(result, False)

    def test_expose_meld_1(self):
        # [D4][D4][D5][D5][D6][D6][B1][B2][B3][C4][C5][Wh][Wh]
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][2])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][3])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][3])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][7])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][11])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DOTS][14])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DOTS][15])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DOTS][16])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DOTS][17])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DOTS][22])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DOTS][23])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][15])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][16])
        meld = gpmjcore.Meld()
        meld.tiles.append(self.all_tiles[gpmjcore.Suits.CHARACTERS][15])
        meld.tiles.append(self.all_tiles[gpmjcore.Suits.CHARACTERS][16])
        discarded_tile = self.all_tiles[gpmjcore.Suits.CHARACTERS][20]
        meld.tiles.append(discarded_tile)
        result = self.hand.steal_tile(meld, discarded_tile)
        self.assertEqual(result, True)

    def test_meld_kong_able_0(self):
        # [B1][B1][B1][B2][B3][B4][B5][B6][B7][B8][B8][B9][B9]
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][1])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][2])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][3])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][4])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][11])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][12])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][19])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][20])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][27])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][28])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][30])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][34])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][35])
        meld = self.hand.get_meld_kong_able(self.all_tiles[gpmjcore.Suits.BAMBOO][29])
        self.assertEqual(meld, None)

    def test_meld_kong_able_1(self):
        # [B1][B1][B1][B2][B3][B4][B5][B6][B7][B8][B8][B9][B9]
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][1])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][2])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][3])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][4])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][11])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][12])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][19])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][20])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][27])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][28])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][30])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][34])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][35])
        meld = self.hand.get_meld_kong_able(self.all_tiles[gpmjcore.Suits.BAMBOO][0])
        self.assertEqual(meld.tiles[0].suit, gpmjcore.Suits.BAMBOO)
        self.assertEqual(meld.tiles[0].number, 1)
        self.assertEqual(meld.tiles[1].number, 1)
        self.assertEqual(meld.tiles[2].number, 1)
        self.assertEqual(meld.tiles[3].number, 1)

    def test_melds_pong_able_0(self):
        # [B1][B1][B1][B2][B3][B4][B5][B6][B7][B8][B9][B9][B9]
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][1])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][2])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][3])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][4])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][11])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][12])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][19])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][20])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][27])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][28])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][33])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][34])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][35])
        melds = self.hand.get_melds_pong_able(self.all_tiles[gpmjcore.Suits.BAMBOO][29])
        self.assertEqual(melds, [])

    def test_melds_pong_able_1(self):
        # [B1][B1][B1][B2][B3][B4][B5][B6][B7][B8][B8][B9][B9]
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][1])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][2])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][3])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][4])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][11])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][12])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][19])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][20])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][27])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][28])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][30])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][34])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][35])
        melds = self.hand.get_melds_pong_able(self.all_tiles[gpmjcore.Suits.BAMBOO][29])
        self.assertEqual(len(melds), 1)
        self.assertEqual(melds[0].tiles[0].suit, gpmjcore.Suits.BAMBOO)
        self.assertEqual(melds[0].tiles[0].number, 8)
        self.assertEqual(melds[0].tiles[1].number, 8)
        self.assertEqual(melds[0].tiles[2].number, 8)

    def test_melds_chow_able_0(self):
        # [B1][B1][B1][B2][B3][B4][B5][B6][B7][B8][B9][B9][B9]
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][1])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][2])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][3])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][4])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][11])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][12])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][19])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][20])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][27])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][28])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][33])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][34])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][35])
        melds = self.hand.get_melds_chow_able(self.all_tiles[gpmjcore.Suits.DRAGONS][0])
        self.assertEqual(melds, [])

    def test_melds_chow_able_3(self):
        # [B1][B1][B1][B2][B3][B4][B5][B6][B7][B8][B9][B9][B9]
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][1])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][2])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][3])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][4])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][11])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][12])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][19])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][20])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][27])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][28])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][33])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][34])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][35])
        melds = self.hand.get_melds_chow_able(self.all_tiles[gpmjcore.Suits.BAMBOO][8])
        self.assertEqual(len(melds), 3)
        self.assertEqual(melds[0].tiles[0].suit, gpmjcore.Suits.BAMBOO)
        self.assertEqual(melds[0].tiles[0].number, 1)
        self.assertEqual(melds[0].tiles[1].number, 2)
        self.assertEqual(melds[0].tiles[2].number, 3)
        self.assertEqual(melds[1].tiles[0].suit, gpmjcore.Suits.BAMBOO)
        self.assertEqual(melds[1].tiles[0].number, 2)
        self.assertEqual(melds[1].tiles[1].number, 3)
        self.assertEqual(melds[1].tiles[2].number, 4)
        self.assertEqual(melds[2].tiles[0].suit, gpmjcore.Suits.BAMBOO)
        self.assertEqual(melds[2].tiles[0].number, 3)
        self.assertEqual(melds[2].tiles[1].number, 4)
        self.assertEqual(melds[2].tiles[2].number, 5)

    def test_melds_chow_able_2(self):
        # [B1][B1][B1][B2][B3][B4][B5][B6][B7][B8][B9][B9][B9]
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][1])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][2])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][3])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][4])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][11])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][12])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][19])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][20])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][27])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][28])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][33])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][34])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][35])
        melds = self.hand.get_melds_chow_able(self.all_tiles[gpmjcore.Suits.BAMBOO][5])
        self.assertEqual(len(melds), 2)
        self.assertEqual(melds[0].tiles[0].suit, gpmjcore.Suits.BAMBOO)
        self.assertEqual(melds[0].tiles[0].number, 1)
        self.assertEqual(melds[0].tiles[1].number, 2)
        self.assertEqual(melds[0].tiles[2].number, 3)
        self.assertEqual(melds[1].tiles[0].suit, gpmjcore.Suits.BAMBOO)
        self.assertEqual(melds[1].tiles[0].number, 2)
        self.assertEqual(melds[1].tiles[1].number, 3)
        self.assertEqual(melds[1].tiles[2].number, 4)

    def test_melds_chow_able_1(self):
        # [B1][B1][B1][B2][B3][B4][B5][B6][B7][B8][B9][B9][B9]
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][1])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][2])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][3])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][4])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][11])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][12])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][19])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][20])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][27])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][28])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][33])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][34])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][35])
        melds = self.hand.get_melds_chow_able(self.all_tiles[gpmjcore.Suits.BAMBOO][0])
        self.assertEqual(len(melds), 1)
        self.assertEqual(melds[0].tiles[0].suit, gpmjcore.Suits.BAMBOO)
        self.assertEqual(melds[0].tiles[0].number, 1)
        self.assertEqual(melds[0].tiles[1].number, 2)
        self.assertEqual(melds[0].tiles[2].number, 3)

    def test_basic_wait_nonuple_B1B2B3B4B5B6B7B8B9(self):
        # [B1][B1][B1][B2][B3][B4][B5][B6][B7][B8][B9][B9][B9]
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][1])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][2])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][3])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][4])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][11])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][12])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][19])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][20])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][27])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][28])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][33])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][34])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][35])
        self.required = self.hand.get_required_basic()
        self.assertEqual(self.required, [set(),{1,2,3,4,5,6,7,8,9},set(),set(),set()])

    def test_basic_wait_octuple_B1B2B4B5B6B7B8B9(self):
        # [B2][B3][B3][B3][B3][B4][B4][B5][B6][B7][B8][B8][B8]
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][7])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][8])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][9])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][10])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][11])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][12])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][13])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][19])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][20])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][27])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][28])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][29])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][30])
        self.required = self.hand.get_required_basic()
        self.assertEqual(self.required, [set(),{1,2,4,5,6,7,8,9},set(),set(),set()])

    def test_basic_wait_septuple_B1B2B4B5B6B8B9(self):
        # [B2][B3][B3][B3][B3][B4][B5][B6][B7][B7][B7][B7][B8]
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][7])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][8])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][9])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][10])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][11])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][12])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][19])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][20])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][24])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][25])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][26])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][27])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][28])
        self.required = self.hand.get_required_basic()
        self.assertEqual(self.required, [set(),{1,2,4,5,6,8,9},set(),set(),set()])

    def test_basic_wait_hexatruple_B2B3B5B6B8B9(self):
        # [B2][B3][B4][B4][B4][B4][B5][B6][B7][B8][Rd][Rd][Rd]
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][8])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][9])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][10])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][7])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][8])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][12])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][13])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][14])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][15])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][19])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][20])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][27])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][28])
        self.required = self.hand.get_required_basic()
        self.assertEqual(self.required, [set(),{2,3,5,6,8,9},set(),set(),set()])

    def test_basic_wait_quintuple_B2B4B5B7B8(self):
        # [B3][B3][B3][B4][B5][B6][B7][D3][D4][D5][Rd][Rd][Rd]
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][8])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][9])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][10])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][9])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][10])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][11])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][12])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][19])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][20])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][24])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DOTS][11])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DOTS][12])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DOTS][16])
        self.required = self.hand.get_required_basic()
        self.assertEqual(self.required, [set(),{2,4,5,7,8},set(),set(),set()])

    def test_basic_wait_quadruple_D1D4D7Wh(self):
        # [D2][D3][D4][D5][D6][D7][D7][D7][B3][B4][B5][Wh][Wh]
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][2])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][3])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][11])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][12])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][16])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DOTS][7])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DOTS][8])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DOTS][15])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DOTS][16])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DOTS][23])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DOTS][24])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DOTS][25])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DOTS][26])
        self.required = self.hand.get_required_basic()
        self.assertEqual(self.required, [{1,4,7},set(),set(),set(),{0}])

    def test_basic_wait_triple_D1D4D7(self):
        # [D2][D3][D4][D5][D6][C8][C8][C8][B3][B4][B5][Wh][Wh]
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][2])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][3])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][11])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][12])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][16])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DOTS][7])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DOTS][8])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DOTS][15])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DOTS][16])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DOTS][23])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][28])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][29])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][30])
        self.required = self.hand.get_required_basic()
        self.assertEqual(self.required, [{1,4,7},set(),set(),set(),set()])

    def test_basic_wait_triple_D4D7Wh(self):
        # [D4][D4][D5][D5][D6][D6][D7][D7][B3][B4][B5][Wh][Wh]
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][2])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][3])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][11])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][12])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][16])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DOTS][14])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DOTS][15])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DOTS][16])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DOTS][17])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DOTS][22])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DOTS][23])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DOTS][24])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DOTS][25])
        self.required = self.hand.get_required_basic()
        self.assertEqual(self.required, [{4,7},set(),set(),set(),{0}])

    def test_basic_wait_double_eyes_C4Wh(self):
        # [D4][D4][D5][D5][D6][D6][B1][B2][B3][C4][C4][Wh][Wh]
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][2])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][3])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][3])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][7])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][11])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DOTS][14])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DOTS][15])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DOTS][16])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DOTS][17])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DOTS][22])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DOTS][23])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][14])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][15])
        self.required = self.hand.get_required_basic()
        self.assertEqual(self.required, [set(),set(),{4},set(),{0}])

    def test_basic_wait_double_C3C6(self):
        # [D4][D4][D5][D5][D6][D6][B1][B2][B3][C4][C5][Wh][Wh]
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][2])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][3])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][3])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][7])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][11])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DOTS][14])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DOTS][15])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DOTS][16])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DOTS][17])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DOTS][22])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DOTS][23])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][15])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][16])
        self.required = self.hand.get_required_basic()
        self.assertEqual(self.required, [set(),set(),{3,6},set(),set()])

    def test_basic_wait_single_eye_D2(self):
        # [D2][D4][D4][D5][D5][D6][D6][B1][B2][B3][Wh][Wh][Wh]
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][0])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][2])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][3])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][3])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][7])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][11])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DOTS][4])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DOTS][14])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DOTS][15])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DOTS][16])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DOTS][17])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DOTS][22])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DOTS][23])
        self.required = self.hand.get_required_basic()
        self.assertEqual(self.required, [{2},set(),set(),set(),set()])

    def test_7pairs_None(self):
        # [D1][D1][D1][D1][C9][C9][Es][St][St][Nt][Nt][Gr][Gr]
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][4])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][7])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.WINDS][15])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.WINDS][13])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.WINDS][7])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.WINDS][0])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.WINDS][5])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DOTS][0])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DOTS][3])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][32])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][35])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DOTS][1])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DOTS][2])
        self.required = self.hand.get_required_7pairs()
        self.assertEqual(self.required, None)

    def test_7pairs_wait_Es(self):
        # [D1][D1][B1][B1][C9][C9][Es][St][St][Nt][Nt][Gr][Gr]
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][4])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][7])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.WINDS][15])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.WINDS][13])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.WINDS][7])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.WINDS][0])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.WINDS][5])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][3])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][2])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][32])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][35])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DOTS][1])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DOTS][2])
        self.required = self.hand.get_required_7pairs()
        self.assertEqual(self.required, [set(),set(),set(),{0},set()])

    def test_13orphans_None(self):
        # [D1][B1][C1][C9][Es][Es][St][Ws][Nt][Wh][Wh][Gr][Rd]
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][2])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][1])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][10])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][5])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.WINDS][13])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.WINDS][4])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.WINDS][0])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.WINDS][10])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.WINDS][2])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][2])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][32])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][3])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DOTS][1])
        self.required = self.hand.get_required_13orphans()
        self.assertEqual(self.required, None)

    def test_13orphans_wait_B9(self):
        # [D1][D9][B1][C1][C9][Es][Es][St][Ws][Nt][Wh][Gr][Rd]
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][1])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][10])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][5])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.WINDS][13])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.WINDS][4])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.WINDS][0])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.WINDS][10])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.WINDS][2])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][2])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][32])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][3])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DOTS][1])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DOTS][35])
        self.required = self.hand.get_required_13orphans()
        self.assertEqual(self.required, [set(),{9},set(),set(),set()])

    def test_13orphans_wait_all13orphans(self):
        # [D1][D9][B1][B9][C1][C9][Es][St][Ws][Nt][Wh][Gr][Rd]
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][1])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][10])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DRAGONS][5])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.WINDS][13])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.WINDS][4])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.WINDS][10])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.WINDS][2])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][2])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.BAMBOO][33])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][32])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.CHARACTERS][3])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DOTS][1])
        self.hand.append_tile(self.all_tiles[gpmjcore.Suits.DOTS][35])
        self.required = self.hand.get_required_13orphans()
        self.assertEqual(self.required, [{1,9},{1,9},{1,9},{0,1,2,3},{0,1,2}])

if __name__ == '__main__':
    unittest.main()

