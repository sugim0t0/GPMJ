#!/usr/bin/env python

import unittest
# from gpmj import gpmjgame
# from gpmj import gpmjcore
import gpmjgame
import gpmjcore

class TestGpmjGame(unittest.TestCase):
    
    game = None

    def setUp(self):
        self.game = gpmjgame.Game()

    def tearDown(self):
        self.game = None

    def setup_game(self):
        self.game.create_tiles()
        self.game.setup_round()
        self.game.setup_hand_judger()

    def set_doras(self, doras, underneath_doras):
        self.game.doras = doras
        self.game.underneath_doras = underneath_doras

    def test_make_state_flag_0(self):
        self.setup_game()
        player_info_east = self.game.set_player("Tanaka")
        player_info_south = self.game.set_player("Suzuki")
        player_info_west = self.game.set_player("Watanabe")
        player_info_north = self.game.set_player("Sasaki")
        state_flag = player_info_east.make_state_flag(True, False, False, False)
        self.assertEqual(state_flag, gpmjcore.StateFlag.HAND_OF_MAN)

    def test_make_state_flag_1(self):
        self.setup_game()
        player_info_east = self.game.set_player("Tanaka")
        player_info_south = self.game.set_player("Suzuki")
        player_info_west = self.game.set_player("Watanabe")
        player_info_north = self.game.set_player("Sasaki")
        state_flag = player_info_east.make_state_flag(False, False, False, False)
        self.assertEqual(state_flag, gpmjcore.StateFlag.HEAVENLY_HAND)

    def test_make_state_flag_2(self):
        self.setup_game()
        player_info_east = self.game.set_player("Tanaka")
        player_info_south = self.game.set_player("Suzuki")
        player_info_west = self.game.set_player("Watanabe")
        player_info_north = self.game.set_player("Sasaki")
        state_flag = player_info_south.make_state_flag(False, False, False, False)
        self.assertEqual(state_flag, gpmjcore.StateFlag.HAND_OF_EARTH)

    def test_make_state_flag_3(self):
        self.setup_game()
        player_info_east = self.game.set_player("Tanaka")
        player_info_south = self.game.set_player("Suzuki")
        player_info_west = self.game.set_player("Watanabe")
        player_info_north = self.game.set_player("Sasaki")
        player_info_east.b_first_pick = False
        player_info_east.b_declared_double_ready = True
        player_info_east.b_one_shot = True
        state_flag = player_info_east.make_state_flag(False, False, False, False)
        self.assertTrue(state_flag & gpmjcore.StateFlag.DECLARE_DOUBLE_READY)
        self.assertTrue(state_flag & gpmjcore.StateFlag.ONE_SHOT)
        self.assertTrue(state_flag & gpmjcore.StateFlag.SELF_PICK)

    def test_make_state_flag_4(self):
        self.setup_game()
        player_info_east = self.game.set_player("Tanaka")
        player_info_south = self.game.set_player("Suzuki")
        player_info_west = self.game.set_player("Watanabe")
        player_info_north = self.game.set_player("Sasaki")
        player_info_east.b_first_pick = False
        player_info_east.b_declared_ready = True
        state_flag = player_info_east.make_state_flag(True, False, False, True)
        self.assertTrue(state_flag & gpmjcore.StateFlag.DECLARE_READY)
        self.assertTrue(state_flag & gpmjcore.StateFlag.LAST_DISCARD)

    def test_make_state_flag_5(self):
        self.setup_game()
        player_info_east = self.game.set_player("Tanaka")
        player_info_south = self.game.set_player("Suzuki")
        player_info_west = self.game.set_player("Watanabe")
        player_info_north = self.game.set_player("Sasaki")
        player_info_east.b_first_pick = False
        state_flag = player_info_east.make_state_flag(False, False, False, True)
        self.assertTrue(state_flag & gpmjcore.StateFlag.LAST_TILE_FROM_THE_WALL)

    def test_make_state_flag_6(self):
        self.setup_game()
        player_info_east = self.game.set_player("Tanaka")
        player_info_south = self.game.set_player("Suzuki")
        player_info_west = self.game.set_player("Watanabe")
        player_info_north = self.game.set_player("Sasaki")
        player_info_east.b_first_pick = False
        state_flag = player_info_east.make_state_flag(False, True, False, False)
        self.assertTrue(state_flag & gpmjcore.StateFlag.DEAD_WALL_DRAW)

    def test_make_state_flag_7(self):
        self.setup_game()
        player_info_east = self.game.set_player("Tanaka")
        player_info_south = self.game.set_player("Suzuki")
        player_info_west = self.game.set_player("Watanabe")
        player_info_north = self.game.set_player("Sasaki")
        player_info_east.b_first_pick = False
        state_flag = player_info_east.make_state_flag(False, False, True, False)
        self.assertTrue(state_flag & gpmjcore.StateFlag.ROBBING_A_QUAD)

    def test_round_over_0(self):
        self.setup_game()
        player_info_east = self.game.set_player("Tanaka")
        player_info_south = self.game.set_player("Suzuki")
        player_info_west = self.game.set_player("Watanabe")
        player_info_north = self.game.set_player("Sasaki")
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 2))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 2))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 3))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 2))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 3))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 4))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 3))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 4))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 5))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.RED))
        player_info_south.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 1))
        player_info_south.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 2))
        player_info_south.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 3))
        player_info_south.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 2))
        player_info_south.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 3))
        player_info_south.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 5))
        player_info_south.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 3))
        player_info_south.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 4))
        player_info_south.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 5))
        player_info_south.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        player_info_south.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        player_info_south.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        player_info_south.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.RED))
        player_info_west.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 1))
        player_info_west.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 2))
        player_info_west.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 3))
        player_info_west.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 2))
        player_info_west.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 3))
        player_info_west.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 4))
        player_info_west.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 3))
        player_info_west.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 4))
        player_info_west.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 5))
        player_info_west.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        player_info_west.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.WEST))
        player_info_west.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        player_info_west.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.RED))
        player_info_north.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 1))
        player_info_north.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 2))
        player_info_north.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 3))
        player_info_north.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 2))
        player_info_north.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 3))
        player_info_north.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 4))
        player_info_north.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 3))
        player_info_north.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 4))
        player_info_north.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 5))
        player_info_north.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        player_info_north.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        player_info_north.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        player_info_north.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        player_info_east.hand.update_required()
        player_info_south.hand.update_required()
        player_info_west.hand.update_required()
        player_info_north.hand.update_required()
        self.game.round_over()
        self.assertEqual(player_info_east.score, 25000)
        self.assertEqual(player_info_south.score, 25000)
        self.assertEqual(player_info_west.score, 25000)
        self.assertEqual(player_info_north.score, 25000)

    def test_round_over_1(self):
        self.setup_game()
        player_info_east = self.game.set_player("Tanaka")
        player_info_south = self.game.set_player("Suzuki")
        player_info_west = self.game.set_player("Watanabe")
        player_info_north = self.game.set_player("Sasaki")
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 2))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 2))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 2))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 2))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 3))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 4))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 3))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 4))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 5))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.RED))
        player_info_south.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 1))
        player_info_south.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 2))
        player_info_south.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 3))
        player_info_south.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 2))
        player_info_south.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 3))
        player_info_south.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 5))
        player_info_south.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 3))
        player_info_south.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 4))
        player_info_south.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 5))
        player_info_south.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        player_info_south.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        player_info_south.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        player_info_south.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.RED))
        player_info_west.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 1))
        player_info_west.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 2))
        player_info_west.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 3))
        player_info_west.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 2))
        player_info_west.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 3))
        player_info_west.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 4))
        player_info_west.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 3))
        player_info_west.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 4))
        player_info_west.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 5))
        player_info_west.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        player_info_west.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.WEST))
        player_info_west.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        player_info_west.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.RED))
        player_info_north.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 1))
        player_info_north.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 2))
        player_info_north.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 3))
        player_info_north.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 2))
        player_info_north.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 3))
        player_info_north.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 4))
        player_info_north.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 3))
        player_info_north.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 4))
        player_info_north.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 5))
        player_info_north.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        player_info_north.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        player_info_north.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        player_info_north.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        player_info_east.hand.update_required()
        player_info_south.hand.update_required()
        player_info_west.hand.update_required()
        player_info_north.hand.update_required()
        self.game.round_over()
        self.assertEqual(player_info_east.score, 28000)
        self.assertEqual(player_info_south.score, 24000)
        self.assertEqual(player_info_west.score, 24000)
        self.assertEqual(player_info_north.score, 24000)

    def test_round_over_2(self):
        self.setup_game()
        player_info_east = self.game.set_player("Tanaka")
        player_info_south = self.game.set_player("Suzuki")
        player_info_west = self.game.set_player("Watanabe")
        player_info_north = self.game.set_player("Sasaki")
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 2))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 2))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 2))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 2))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 3))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 4))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 3))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 4))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 5))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.RED))
        player_info_south.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 1))
        player_info_south.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 2))
        player_info_south.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 3))
        player_info_south.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 2))
        player_info_south.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 3))
        player_info_south.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 4))
        player_info_south.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 3))
        player_info_south.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 4))
        player_info_south.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 5))
        player_info_south.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        player_info_south.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        player_info_south.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        player_info_south.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.RED))
        player_info_west.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 1))
        player_info_west.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 2))
        player_info_west.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 3))
        player_info_west.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 2))
        player_info_west.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 3))
        player_info_west.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 4))
        player_info_west.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 3))
        player_info_west.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 4))
        player_info_west.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 5))
        player_info_west.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        player_info_west.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.WEST))
        player_info_west.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        player_info_west.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.RED))
        player_info_north.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 1))
        player_info_north.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 2))
        player_info_north.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 3))
        player_info_north.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 2))
        player_info_north.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 3))
        player_info_north.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 4))
        player_info_north.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 3))
        player_info_north.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 4))
        player_info_north.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 5))
        player_info_north.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        player_info_north.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        player_info_north.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        player_info_north.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        player_info_east.hand.update_required()
        player_info_south.hand.update_required()
        player_info_west.hand.update_required()
        player_info_north.hand.update_required()
        self.game.round_over()
        self.assertEqual(player_info_east.score, 26500)
        self.assertEqual(player_info_south.score, 26500)
        self.assertEqual(player_info_west.score, 23500)
        self.assertEqual(player_info_north.score, 23500)

    def test_round_over_3(self):
        self.setup_game()
        player_info_east = self.game.set_player("Tanaka")
        player_info_south = self.game.set_player("Suzuki")
        player_info_west = self.game.set_player("Watanabe")
        player_info_north = self.game.set_player("Sasaki")
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 2))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 2))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 2))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 2))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 3))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 4))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 3))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 4))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 5))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.RED))
        player_info_south.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 1))
        player_info_south.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 2))
        player_info_south.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 3))
        player_info_south.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 2))
        player_info_south.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 3))
        player_info_south.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 4))
        player_info_south.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 3))
        player_info_south.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 4))
        player_info_south.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 5))
        player_info_south.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        player_info_south.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        player_info_south.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        player_info_south.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.RED))
        player_info_west.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 1))
        player_info_west.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 2))
        player_info_west.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 3))
        player_info_west.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 2))
        player_info_west.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 3))
        player_info_west.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 4))
        player_info_west.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 3))
        player_info_west.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 4))
        player_info_west.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 5))
        player_info_west.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        player_info_west.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        player_info_west.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        player_info_west.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.RED))
        player_info_north.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 1))
        player_info_north.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 2))
        player_info_north.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 3))
        player_info_north.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 2))
        player_info_north.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 3))
        player_info_north.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 4))
        player_info_north.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 3))
        player_info_north.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 4))
        player_info_north.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 5))
        player_info_north.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        player_info_north.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        player_info_north.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        player_info_north.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        player_info_east.hand.update_required()
        player_info_south.hand.update_required()
        player_info_west.hand.update_required()
        player_info_north.hand.update_required()
        self.game.round_over()
        self.assertEqual(player_info_east.score, 26000)
        self.assertEqual(player_info_south.score, 26000)
        self.assertEqual(player_info_west.score, 26000)
        self.assertEqual(player_info_north.score, 22000)

    def test_round_over_4(self):
        self.setup_game()
        player_info_east = self.game.set_player("Tanaka")
        player_info_south = self.game.set_player("Suzuki")
        player_info_west = self.game.set_player("Watanabe")
        player_info_north = self.game.set_player("Sasaki")
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 2))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 2))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 2))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 2))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 3))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 4))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 3))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 4))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 5))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.RED))
        player_info_south.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 1))
        player_info_south.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 2))
        player_info_south.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 3))
        player_info_south.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 2))
        player_info_south.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 3))
        player_info_south.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 5))
        player_info_south.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 3))
        player_info_south.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 4))
        player_info_south.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 5))
        player_info_south.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        player_info_south.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        player_info_south.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        player_info_south.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.RED))
        player_info_west.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 1))
        player_info_west.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 2))
        player_info_west.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 3))
        player_info_west.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 2))
        player_info_west.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 3))
        player_info_west.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 4))
        player_info_west.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 3))
        player_info_west.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 4))
        player_info_west.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 5))
        player_info_west.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        player_info_west.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.WEST))
        player_info_west.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        player_info_west.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.RED))
        player_info_north.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 1))
        player_info_north.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 2))
        player_info_north.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 3))
        player_info_north.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 2))
        player_info_north.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 3))
        player_info_north.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 4))
        player_info_north.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 3))
        player_info_north.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 4))
        player_info_north.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 5))
        player_info_north.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        player_info_north.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        player_info_north.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        player_info_north.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        player_info_east.hand.update_required()
        player_info_south.hand.update_required()
        player_info_west.hand.update_required()
        player_info_north.hand.update_required()
        self.game.config.continue_by_dealer_ready = False
        result = self.game.round_over()
        self.assertEqual(result, False)

    def test_discard_tile_0(self):
        self.setup_game()
        player_info_east = self.game.set_player("Tanaka")
        discard_tile = gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.RED)
        self.game.pickup_tile(player_info_east, gpmjcore.Tile(gpmjcore.Suits.DOTS, 2))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 2))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 2))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 2))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 2))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 3))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 4))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 3))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 4))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 5))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        player_info_east.hand.append_tile(discard_tile)
        pick_tile = gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.WHITE)
        player_info_east.hand.append_tile(pick_tile)
        self.game.discard_tile(player_info_east, discard_tile, True)
        self.assertEqual(player_info_east.b_declared_double_ready, True)
        self.assertEqual(player_info_east.b_one_shot, True)
        self.assertEqual(self.game.num_of_declared_ready_sticks, 1)
        pick_tile = gpmjcore.Tile(gpmjcore.Suits.DOTS, 3)
        self.game.discard_tile(player_info_east, pick_tile, False)
        player_info_east.print_discards()
        self.assertEqual(player_info_east.b_one_shot, False)

    def test_discard_tile_1(self):
        self.setup_game()
        player_info_east = self.game.set_player("Tanaka")
        discard_tile = gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.RED)
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 2))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 2))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 2))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 2))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 3))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 4))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 3))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 4))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 5))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        player_info_east.hand.append_tile(discard_tile)
        pick_tile = gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.WHITE)
        player_info_east.hand.append_tile(pick_tile)
        self.assertEqual(player_info_east.b_first_pick, True)
        self.game.discard_tile(player_info_east, discard_tile, False)
        self.assertEqual(player_info_east.b_first_pick, False)
        self.assertEqual(player_info_east.b_one_shot, False)
        pick_tile = gpmjcore.Tile(gpmjcore.Suits.DOTS, 3)
        self.game.discard_tile(player_info_east, pick_tile, True)
        self.assertEqual(player_info_east.b_declared_ready, True)
        self.assertEqual(player_info_east.b_one_shot, True)

    def test_discard_tile_2(self):
        self.setup_game()
        player_info_east = self.game.set_player("Tanaka")
        discard_tile = gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.RED)
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 2))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 2))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 2))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 2))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 3))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 4))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 3))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 4))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 5))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        player_info_east.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        player_info_east.hand.append_tile(discard_tile)
        pick_tile = gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.WHITE)
        player_info_east.hand.append_tile(pick_tile)
        player_info_east.score = 800
        result = self.game.discard_tile(player_info_east, discard_tile, True)
        self.assertEqual(result, False)

    def test_set_player(self):
        self.setup_game()
        player_info = self.game.set_player("Matsui")
        self.assertEqual(player_info.seat_wind, gpmjcore.Winds.EAST)
        player_info = self.game.set_player("Ichiro")
        self.assertEqual(player_info.seat_wind, gpmjcore.Winds.SOUTH)
        player_info = self.game.set_player("Nomo")
        self.assertEqual(player_info.seat_wind, gpmjcore.Winds.WEST)
        player_info = self.game.set_player("Matsuzaka")
        self.assertEqual(player_info.seat_wind, gpmjcore.Winds.NORTH)
        player_info = self.game.set_player("Tanaka")
        self.assertIsNone(player_info)

    def test_win_0(self):
        self.setup_game()
        player_info_east = self.game.set_player("Tanaka")
        player_info_south = self.game.set_player("Suzuki")
        player_info_west = self.game.set_player("Watanabe")
        player_info_north = self.game.set_player("Sasaki")
        self.game.win(player_info_east, False, gpmjcore.Winds.INVALID, (2000, 0))
        self.game.print_players_score()
        self.assertEqual(player_info_east.score, 31000)
        self.assertEqual(player_info_south.score, 23000)
        self.assertEqual(player_info_west.score, 23000)
        self.assertEqual(player_info_north.score, 23000)

    def test_win_1(self):
        self.setup_game()
        player_info_east = self.game.set_player("Tanaka")
        player_info_south = self.game.set_player("Suzuki")
        player_info_west = self.game.set_player("Watanabe")
        player_info_north = self.game.set_player("Sasaki")
        self.game.win(player_info_east, True, gpmjcore.Winds.SOUTH, (12000, 0))
        self.assertEqual(player_info_east.score, 37000)
        self.assertEqual(player_info_south.score, 13000)
        self.assertEqual(player_info_west.score, 25000)
        self.assertEqual(player_info_north.score, 25000)

    def test_win_2(self):
        self.setup_game()
        player_info_east = self.game.set_player("Tanaka")
        player_info_south = self.game.set_player("Suzuki")
        player_info_west = self.game.set_player("Watanabe")
        player_info_north = self.game.set_player("Sasaki")
        self.game.win(player_info_south, False, gpmjcore.Winds.INVALID, (2000, 4000))
        self.assertEqual(player_info_east.score, 21000)
        self.assertEqual(player_info_south.score, 33000)
        self.assertEqual(player_info_west.score, 23000)
        self.assertEqual(player_info_north.score, 23000)

    def test_win_3(self):
        self.setup_game()
        player_info_east = self.game.set_player("Tanaka")
        player_info_south = self.game.set_player("Suzuki")
        player_info_west = self.game.set_player("Watanabe")
        result = self.game.win(player_info_south, True, gpmjcore.Winds.NORTH, (2000, 0))
        self.assertEqual(result, False)

    def test_win_4(self):
        self.setup_game()
        self.game.num_of_declared_ready_sticks = 2
        player_info_east = self.game.set_player("Tanaka")
        player_info_south = self.game.set_player("Suzuki")
        player_info_west = self.game.set_player("Watanabe")
        player_info_north = self.game.set_player("Sasaki")
        self.game.win(player_info_south, False, gpmjcore.Winds.INVALID, (2000, 4000))
        self.assertEqual(player_info_east.score, 21000)
        self.assertEqual(player_info_south.score, 35000)
        self.assertEqual(player_info_west.score, 23000)
        self.assertEqual(player_info_north.score, 23000)

    def test_game_over_0(self):
        self.setup_game()
        player_info_east = self.game.set_player("Tanaka")
        player_info_south = self.game.set_player("Suzuki")
        player_info_west = self.game.set_player("Watanabe")
        player_info_north = self.game.set_player("Sasaki")
        self.game.win(player_info_south, False, gpmjcore.Winds.INVALID, (2000, 4000))
        self.game.num_of_declared_ready_sticks = 2
        self.game.game_over()
        self.assertEqual(player_info_east.score, 21000)
        self.assertEqual(player_info_south.score, 35000)
        self.assertEqual(player_info_west.score, 23000)
        self.assertEqual(player_info_north.score, 23000)

    def test_game_over_1(self):
        self.setup_game()
        player_info_east = self.game.set_player("Tanaka")
        player_info_south = self.game.set_player("Suzuki")
        player_info_west = self.game.set_player("Watanabe")
        player_info_north = self.game.set_player("Sasaki")
        self.game.num_of_declared_ready_sticks = 2
        player_info_east.start_seat_wind = gpmjcore.Winds.NORTH
        player_info_north.start_seat_wind = gpmjcore.Winds.EAST
        self.game.game_over()
        self.assertEqual(player_info_east.score, 25000)
        self.assertEqual(player_info_south.score, 25000)
        self.assertEqual(player_info_west.score, 25000)
        self.assertEqual(player_info_north.score, 27000)

    def test_goto_next_round_0(self):
        self.setup_game()
        player_info_east = self.game.set_player("Tanaka")
        player_info_south = self.game.set_player("Suzuki")
        player_info_west = self.game.set_player("Watanabe")
        player_info_north = self.game.set_player("Sasaki")
        self.game.win(player_info_south, False, gpmjcore.Winds.INVALID, (2000, 4000))
        self.game.goto_next_round(False, False)
        self.game.goto_next_round(False, False)
        self.game.goto_next_round(False, False)
        self.game.goto_next_round(False, False)
        self.game.goto_next_round(False, False)
        self.game.goto_next_round(False, False)
        self.game.goto_next_round(False, False)
        result = self.game.goto_next_round(False, False)
        self.assertEqual(result, False)

    def test_goto_next_round_1(self):
        self.setup_game()
        self.game.goto_next_round(False, True)
        self.assertEqual(self.game.round_number, 2)
        self.assertEqual(self.game.round_wind, gpmjcore.Winds.EAST)
        self.assertEqual(self.game.round_continue_count, 1)
        self.game.goto_next_round(True, False)
        self.assertEqual(self.game.round_number, 2)
        self.assertEqual(self.game.round_wind, gpmjcore.Winds.EAST)
        self.assertEqual(self.game.round_continue_count, 2)
        self.game.goto_next_round(False, False)
        self.game.goto_next_round(False, False)
        self.game.goto_next_round(False, False)
        self.assertEqual(self.game.round_number, 1)
        self.assertEqual(self.game.round_wind, gpmjcore.Winds.SOUTH)
        self.assertEqual(self.game.round_continue_count, 0)
        self.game.goto_next_round(False, False)
        self.game.goto_next_round(False, False)
        self.game.goto_next_round(False, False)
        self.game.goto_next_round(False, False)
        self.assertEqual(self.game.round_number, 1)
        self.assertEqual(self.game.round_wind, gpmjcore.Winds.WEST)
        self.assertEqual(self.game.round_continue_count, 0)
        self.game.goto_next_round(False, False)
        self.game.goto_next_round(False, False)
        self.game.goto_next_round(False, False)
        self.game.goto_next_round(False, False)
        self.game.goto_next_round(False, False)
        self.game.goto_next_round(False, False)
        self.game.goto_next_round(False, False)
        self.game.goto_next_round(False, False)
        self.assertEqual(self.game.round_number, 1)
        self.assertEqual(self.game.round_wind, gpmjcore.Winds.EAST)
        self.assertEqual(self.game.round_continue_count, 0)

    def test_deal_starttiles(self):
        self.setup_game()
        hand = gpmjcore.Hand()
        self.game.deal_starttiles(hand)
        hand.sort_tiles()
        print("")
        hand.print_pure_tiles()
        num_of_tiles = 0
        for suit in range(gpmjcore.Suits.NUM_OF_SUITS):
            num_of_tiles += len(hand.pure_tiles[suit])
        self.assertEqual(num_of_tiles, 13)

    def test_call_kong(self):
        self.setup_game()
        num_of_walltiles = len(self.game.wall)
        tile = self.game.call_kong()
        self.assertEqual(self.game.kong_count, 1)
        self.assertEqual(len(self.game.wall), (num_of_walltiles - 1))
        tile = self.game.call_kong()
        self.assertEqual(self.game.kong_count, 2)
        self.assertEqual(len(self.game.wall), (num_of_walltiles - 2))
        tile = self.game.call_kong()
        self.assertEqual(self.game.kong_count, 3)
        self.assertEqual(len(self.game.wall), (num_of_walltiles - 3))
        tile = self.game.call_kong()
        self.assertEqual(self.game.kong_count, 4)
        self.assertEqual(len(self.game.wall), (num_of_walltiles - 4))
        tile = self.game.call_kong()
        self.assertIsNone(tile)
        self.assertEqual(self.game.kong_count, 4)
        self.assertEqual(len(self.game.wall), (num_of_walltiles - 4))

    def test_draw_tile(self):
        self.setup_game()
        num_of_walltiles = len(self.game.wall)
        for x in range(num_of_walltiles):
            tile = self.game.draw_tile()
            self.assertIsNotNone(tile)
        else:
            tile = self.game.draw_tile()
            self.assertIsNone(tile)

    def test_get_num_of_dora_0(self):
        # [D1][D2][D3][B2][B3][B4][C3][C4][C5][Nt][Nt][Nt][Rd] + [Rd]
        # Not be declared ready
        # dora indicator -> [B1], [Ws]
        # underneath dora indicator -> [D9], [B4]
        self.game.create_tiles()
        self.game.kong_count = 1
        self.game.doras.append(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 1))
        self.game.doras.append(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.WEST))
        self.game.underneath_doras.append(gpmjcore.Tile(gpmjcore.Suits.DOTS, 9))
        self.game.underneath_doras.append(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 4))
        hand = gpmjcore.Hand()
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 1))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 2))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 3))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 2))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 3))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 4))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 3))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 4))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 5))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.RED))
        last_tile = gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.RED)
        hand.append_tile(last_tile)
        num_of_dora = self.game.get_num_of_dora(hand, False)
        self.assertEqual(num_of_dora, 4)

    def test_get_num_of_dora_1(self):
        # [D1][D2][D3][B2][B3][B4][C3][C4][C5][Nt][Nt][Nt][Rd] + [Rd]
        # Be declared ready
        # dora indicator -> [B1], [Ws]
        # underneath dora indicator -> [D9], [B4]
        self.game.create_tiles()
        self.game.kong_count = 1
        self.game.doras.append(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 1))
        self.game.doras.append(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.WEST))
        self.game.underneath_doras.append(gpmjcore.Tile(gpmjcore.Suits.DOTS, 9))
        self.game.underneath_doras.append(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 4))
        hand = gpmjcore.Hand()
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 1))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 2))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 3))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 2))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 3))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 4))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 3))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 4))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 5))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.RED))
        last_tile = gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.RED)
        hand.append_tile(last_tile)
        num_of_dora = self.game.get_num_of_dora(hand, True)
        self.assertEqual(num_of_dora, 5)

    def test_get_num_of_dora_2(self):
        # [D1][D2][D3][B2][B3][B4][C3][C4][C5] ([Nt][Nt][Nt][Nt]) [Rd] + [Rd]
        # Be declared ready
        # dora indicator -> [B1], [Ws]
        # underneath dora indicator -> [D9], [B4]
        self.game.create_tiles()
        self.game.kong_count = 1
        self.game.doras.append(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 1))
        self.game.doras.append(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.WEST))
        self.game.underneath_doras.append(gpmjcore.Tile(gpmjcore.Suits.DOTS, 9))
        self.game.underneath_doras.append(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 4))
        hand = gpmjcore.Hand()
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 1))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 2))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 3))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 2))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 3))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 4))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 3))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 4))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 5))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        hand.closed_kong(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH)
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.RED))
        last_tile = gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.RED)
        hand.append_tile(last_tile)
        num_of_dora = self.game.get_num_of_dora(hand, True)
        self.assertEqual(num_of_dora, 6)

    def test_get_num_of_dora_3(self):
        # [D1][D2][D3][B2][B3][B4][C3][C4][C5] ([Nt][Nt][Nt][Nt]) [Rd] + [Rd]
        # Be declared ready
        # dora indicator -> [B1], [Ws]
        # underneath dora indicator -> [D9], [Ws]
        self.game.create_tiles()
        self.game.kong_count = 1
        self.game.doras.append(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 1))
        self.game.doras.append(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.WEST))
        self.game.underneath_doras.append(gpmjcore.Tile(gpmjcore.Suits.DOTS, 9))
        self.game.underneath_doras.append(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.WEST))
        hand = gpmjcore.Hand()
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 1))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 2))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 3))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 2))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 3))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 4))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 3))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 4))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 5))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        hand.closed_kong(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH)
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.RED))
        last_tile = gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.RED)
        hand.append_tile(last_tile)
        num_of_dora = self.game.get_num_of_dora(hand, True)
        self.assertEqual(num_of_dora, 10)

    def test_get_num_of_dora_4(self):
        # [D1][D2][D3][B2][B3][B4][C3][C4][C5] ([D5][D5][D5][D5]) [Rd] + [Rd]
        # Be declared ready
        # dora indicator -> [B1], [Ws]
        # underneath dora indicator -> [D9], [Ws]
        self.game.create_tiles()
        self.game.kong_count = 1
        self.game.doras.append(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 1))
        self.game.doras.append(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.WEST))
        self.game.underneath_doras.append(gpmjcore.Tile(gpmjcore.Suits.DOTS, 9))
        self.game.underneath_doras.append(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.WEST))
        hand = gpmjcore.Hand()
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 1))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 2))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 3))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 2))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 3))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 4))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 3))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 4))
        red_c5 = gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 5)
        red_c5.b_red = True
        hand.append_tile(red_c5)
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 5))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 5))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 5))
        red_d5 = gpmjcore.Tile(gpmjcore.Suits.DOTS, 5)
        red_d5.b_red = True
        hand.append_tile(red_d5)
        hand.closed_kong(gpmjcore.Suits.DOTS, 5)
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.RED))
        last_tile = gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.RED)
        hand.append_tile(last_tile)
        num_of_dora = self.game.get_num_of_dora(hand, True)
        self.assertEqual(num_of_dora, 4)

    def test_create_tiles(self):
        self.game.create_tiles()
        self.assertEqual(len(self.game.tiles), 136)

    def test_setup_round(self):
        self.game.create_tiles()
        self.game.setup_round()
        print("")
        self.game.print_wall()
        self.game.print_dead_wall()
        self.assertEqual(len(self.game.wall), 122)
        self.assertEqual(len(self.game.dead_wall), 14)
        tile = self.game.draw_tile()
        self.assertIsNotNone(tile)
        self.game.print_wall()
        tile = self.game.call_kong()
        self.assertIsNotNone(tile)
        self.game.print_dead_wall()
        for x in range(119):
            tile = self.game.draw_tile()
        self.game.print_wall()
        tile = self.game.draw_tile()
        self.assertIsNotNone(tile)
        self.game.print_wall()
        tile = self.game.draw_tile()
        self.assertIsNone(tile)

    def test_parse_config(self):
        self.game.config.parse_config("./gpmj.cfg")
        self.game.create_tiles()
        self.assertEqual(self.game.config.num_of_red5[0], 1)
        self.assertEqual(self.game.config.num_of_red5[1], 1)
        self.assertEqual(self.game.config.num_of_red5[2], 1)

    def test_get_hand_score_0(self):
        # [D1][D9][B1][B9][C1][C9][Es][St][Ws][Nt][Wh][Gr][Rd] + [Es]
        self.setup_game()
        hand = gpmjcore.Hand()
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 1))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 9))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 1))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 9))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 1))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 9))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.EAST))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.SOUTH))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.WEST))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.WHITE))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.GREEN))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.RED))
        last_tile = gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.EAST)
        win_hand = self.game.get_winhand(hand, 0, last_tile, False, gpmjcore.Winds.SOUTH)
        score = self.game.get_hand_score(win_hand)
        self.assertEqual(score[0], 8000)
        self.assertEqual(score[1], 16000)

    def test_get_hand_score_1(self):
        # [D1][D9][B1][B9][C1][C9][Es][St][Ws][Nt][Wh][Gr][Rd] + [Es]
        self.setup_game()
        self.game.goto_next_round(True, False)
        self.game.goto_next_round(True, False)
        self.game.goto_next_round(True, False)
        hand = gpmjcore.Hand()
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 1))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 9))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 1))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 9))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 1))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 9))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.EAST))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.SOUTH))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.WEST))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.WHITE))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.GREEN))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.RED))
        last_tile = gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.EAST)
        win_hand = self.game.get_winhand(hand, 0, last_tile, False, gpmjcore.Winds.SOUTH)
        score = self.game.get_hand_score(win_hand)
        self.assertEqual(score[0], 8300)
        self.assertEqual(score[1], 16300)

    def test_get_hand_score_2(self):
        # [D1][D9][B1][B9][C1][C9][Es][St][Ws][Nt][Wh][Gr][Rd] + [Es]
        self.setup_game()
        self.game.goto_next_round(True, False)
        self.game.goto_next_round(True, False)
        hand = gpmjcore.Hand()
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 1))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 9))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 1))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 9))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 1))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 9))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.EAST))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.SOUTH))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.WEST))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.WHITE))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.GREEN))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.RED))
        last_tile = gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.EAST)
        win_hand = self.game.get_winhand(hand, 0, last_tile, True, gpmjcore.Winds.SOUTH)
        score = self.game.get_hand_score(win_hand)
        self.assertEqual(score[0], 32600)
        self.assertEqual(score[1], 0)

    def test_get_hand_score_3(self):
        # [D1][D9][B1][B9][C1][C9][Es][St][Ws][Nt][Wh][Gr][Rd] + [Es]
        self.setup_game()
        self.game.goto_next_round(True, False)
        self.game.goto_next_round(True, False)
        hand = gpmjcore.Hand()
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 1))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 9))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 1))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 9))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 1))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 9))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.EAST))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.SOUTH))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.WEST))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.WHITE))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.GREEN))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.RED))
        last_tile = gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.EAST)
        win_hand = self.game.get_winhand(hand, 0, last_tile, False, gpmjcore.Winds.EAST)
        score = self.game.get_hand_score(win_hand)
        self.assertEqual(score[0], 16200)
        self.assertEqual(score[1], 0)

    def test_get_hand_score_4(self):
        # [D1][D9][B1][B9][C1][C9][Es][St][Ws][Nt][Wh][Gr][Rd] + [Es]
        self.setup_game()
        self.game.goto_next_round(True, False)
        self.game.goto_next_round(True, False)
        self.game.goto_next_round(True, False)
        hand = gpmjcore.Hand()
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 1))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 9))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 1))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 9))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 1))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 9))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.EAST))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.SOUTH))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.WEST))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.NORTH))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.WHITE))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.GREEN))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.RED))
        last_tile = gpmjcore.Tile(gpmjcore.Suits.WINDS, gpmjcore.Winds.EAST)
        win_hand = self.game.get_winhand(hand, 0, last_tile, True, gpmjcore.Winds.EAST)
        score = self.game.get_hand_score(win_hand)
        self.assertEqual(score[0], 48900)
        self.assertEqual(score[1], 0)

    def test_get_hand_score_5(self):
        # [D1][D1][D1][B2][B3][B4][B4][B4][C7][C7][C7][C8][C8] + [C9]
        self.setup_game()
        hand = gpmjcore.Hand()
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 1))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 1))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 1))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 2))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 3))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 4))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 4))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 4))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 7))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 7))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 7))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 8))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 8))
        last_tile = gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 9)
        win_hand = self.game.get_winhand(hand, 0, last_tile, False, gpmjcore.Winds.EAST)
        score = self.game.get_hand_score(win_hand)
        self.assertEqual(score[0], 0)
        self.assertEqual(score[1], 0)

    def test_get_hand_score_6(self):
        # [D1][D1][D1][B2][B3][B4][B4][B4][C7][C7][C7][C8][C8] + [C8]
        self.setup_game()
        doras = []
        underneath_doras = []
        doras.append(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.RED))
        doras.append(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.WHITE))
        doras.append(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.GREEN))
        underneath_doras.append(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.RED))
        underneath_doras.append(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.WHITE))
        underneath_doras.append(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.GREEN))
        self.set_doras(doras, underneath_doras)
        hand = gpmjcore.Hand()
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 1))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 1))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 1))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 2))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 3))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 4))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 4))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 4))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 7))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 7))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 7))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 8))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 8))
        last_tile = gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 8)
        state_flag = gpmjcore.StateFlag.SELF_PICK
        win_hand = self.game.get_winhand(hand, state_flag, last_tile, False, gpmjcore.Winds.EAST)
        score = self.game.get_hand_score(win_hand)
        self.assertEqual(score[0], 2600)
        self.assertEqual(score[1], 0)

    def test_get_hand_score_7(self):
        # [D1][D1][D1][B2][B3][B4][B4][B4][Wh][Wh][Wh][C8][C8] + [C8]
        self.setup_game()
        doras = []
        underneath_doras = []
        doras.append(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.RED))
        doras.append(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.WHITE))
        doras.append(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.GREEN))
        underneath_doras.append(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.RED))
        underneath_doras.append(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.WHITE))
        underneath_doras.append(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.GREEN))
        self.set_doras(doras, underneath_doras)
        hand = gpmjcore.Hand()
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 1))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 1))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 1))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 2))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 3))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 4))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 4))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 4))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.WHITE))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.WHITE))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.WHITE))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 8))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 8))
        last_tile = gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 8)
        state_flag = (gpmjcore.StateFlag.SELF_PICK | gpmjcore.StateFlag.DECLARE_READY)
        win_hand = self.game.get_winhand(hand, state_flag, last_tile, False, gpmjcore.Winds.EAST)
        score = self.game.get_hand_score(win_hand)
        self.assertEqual(score[0], 12000)
        self.assertEqual(score[1], 0)

    def test_get_hand_score_8(self):
        # [D1][D1][D1][B2][B2][B4][B4][B4][Wh][Wh][Wh][C8][C8] + [C8]
        self.setup_game()
        doras = []
        underneath_doras = []
        doras.append(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.RED))
        doras.append(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.WHITE))
        doras.append(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.GREEN))
        underneath_doras.append(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.RED))
        underneath_doras.append(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.WHITE))
        underneath_doras.append(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.GREEN))
        self.set_doras(doras, underneath_doras)
        hand = gpmjcore.Hand()
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 1))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 1))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 1))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 2))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 2))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 4))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 4))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 4))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.WHITE))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.WHITE))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.WHITE))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 8))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 8))
        last_tile = gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 8)
        state_flag = (gpmjcore.StateFlag.SELF_PICK | gpmjcore.StateFlag.DECLARE_READY)
        win_hand = self.game.get_winhand(hand, state_flag, last_tile, False, gpmjcore.Winds.EAST)
        score = self.game.get_hand_score(win_hand)
        self.assertEqual(score[0], 16000)
        self.assertEqual(score[1], 0)

    def test_get_hand_score_9(self):
        # [D1][D1][D2][D2][B2][B2][B4][B4][Wh][Wh][C8][C8][C9] + [C9]
        self.setup_game()
        doras = []
        underneath_doras = []
        doras.append(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.RED))
        doras.append(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.WHITE))
        doras.append(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.GREEN))
        underneath_doras.append(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.RED))
        underneath_doras.append(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.WHITE))
        underneath_doras.append(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.GREEN))
        self.set_doras(doras, underneath_doras)
        hand = gpmjcore.Hand()
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 1))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 1))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 2))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 2))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 2))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 2))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 4))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 4))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.WHITE))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.WHITE))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 8))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 8))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 9))
        last_tile = gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 9)
        win_hand = self.game.get_winhand(hand, 0, last_tile, True, gpmjcore.Winds.WEST)
        score = self.game.get_hand_score(win_hand)
        self.assertEqual(score[0], 6400)
        self.assertEqual(score[1], 0)

    def test_get_hand_score_10(self):
        # [D3][D4][D4][D5][D6][B1][B1][B1][C3][C4][C5][C8][C8] + [D5]
        self.setup_game()
        doras = []
        underneath_doras = []
        doras.append(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.RED))
        doras.append(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.WHITE))
        doras.append(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.GREEN))
        underneath_doras.append(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.RED))
        underneath_doras.append(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.WHITE))
        underneath_doras.append(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.GREEN))
        self.set_doras(doras, underneath_doras)
        hand = gpmjcore.Hand()
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 3))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 4))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 4))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 5))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 6))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 1))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 1))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 1))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 3))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 4))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 5))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 8))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 8))
        last_tile = gpmjcore.Tile(gpmjcore.Suits.DOTS, 5)
        state_flag = (gpmjcore.StateFlag.SELF_PICK | gpmjcore.StateFlag.DECLARE_READY)
        win_hand = self.game.get_winhand(hand, state_flag, last_tile, False, gpmjcore.Winds.WEST)
        score = self.game.get_hand_score(win_hand)
        self.assertEqual(score[0], 700)
        self.assertEqual(score[1], 1300)

    def test_get_hand_score_11(self):
        # [D3][D3][D4][D5][B1][B1][B1][C3][C4][C5][C6][C7][C8] + [D3]
        self.setup_game()
        doras = []
        underneath_doras = []
        doras.append(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.RED))
        doras.append(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.WHITE))
        doras.append(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.GREEN))
        underneath_doras.append(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.RED))
        underneath_doras.append(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.WHITE))
        underneath_doras.append(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.GREEN))
        self.set_doras(doras, underneath_doras)
        hand = gpmjcore.Hand()
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 3))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 3))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 4))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 5))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 1))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 1))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 1))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 3))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 4))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 5))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 6))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 7))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 8))
        last_tile = gpmjcore.Tile(gpmjcore.Suits.DOTS, 3)
        state_flag = (gpmjcore.StateFlag.SELF_PICK | gpmjcore.StateFlag.DECLARE_READY)
        win_hand = self.game.get_winhand(hand, state_flag, last_tile, False, gpmjcore.Winds.WEST)
        score = self.game.get_hand_score(win_hand)
        self.assertEqual(score[0], 700)
        self.assertEqual(score[1], 1300)

    def test_get_hand_score_12(self):
        # ([B1][B1][B1]) [D3][D3][D4][D5][C3][C4][C5][C6][C7][C8] + [D3]
        self.setup_game()
        doras = []
        underneath_doras = []
        doras.append(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.RED))
        doras.append(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.WHITE))
        doras.append(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.GREEN))
        self.set_doras(doras, underneath_doras)
        self.game.print_dora_indicators()
        hand = gpmjcore.Hand()
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 3))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 3))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 4))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 5))
        tile1 = gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 1)
        tile2 = gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 1)
        tile3 = gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 1)
        hand.append_tile(tile1)
        hand.append_tile(tile2)
        meld = gpmjcore.Meld()
        meld.add_tile(tile1)
        meld.add_tile(tile2)
        meld.add_tile(tile3)
        hand.steal_tile(meld, tile3)
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 3))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 4))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 5))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 6))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 7))
        hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 8))
        last_tile = gpmjcore.Tile(gpmjcore.Suits.DOTS, 3)
        win_hand = self.game.get_winhand(hand, 0, last_tile, False, gpmjcore.Winds.WEST)
        self.assertIsNone(win_hand)

    def test_reset_round_and_reset_oneshot_firstpick(self):
        self.setup_game()
        player_info_east = self.game.set_player("Tanaka")
        player_info_south = self.game.set_player("Suzuki")
        player_info_west = self.game.set_player("Watanabe")
        player_info_north = self.game.set_player("Sasaki")
        player_info_east.reset_round()
        self.game.print_round_info()
        self.assertEqual(player_info_east.b_first_pick, True)
        self.game.reset_oneshot_firstpick()
        self.assertEqual(player_info_east.b_first_pick, False)
        player_info_east.b_declared_ready = True
        player_info_east.b_one_shot = True
        self.game.reset_oneshot_firstpick()
        self.assertEqual(player_info_east.b_one_shot, False)

    def test_judge_furiten_0(self):
        # [D3][D3][D3][D4][D5][B1][B1][C3][C4][C5][C6][C7][C8]
        self.setup_game()
        tanaka = self.game.set_player("Tanaka")
        tanaka.reset_round()
        doras = []
        underneath_doras = []
        doras.append(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.RED))
        doras.append(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.WHITE))
        doras.append(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.GREEN))
        underneath_doras.append(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.RED))
        underneath_doras.append(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.WHITE))
        underneath_doras.append(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.GREEN))
        self.set_doras(doras, underneath_doras)
        tanaka.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 3))
        tanaka.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 3))
        tanaka.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 3))
        tanaka.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 4))
        tanaka.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 5))
        discard_tile = gpmjcore.Tile(gpmjcore.Suits.DOTS, 6)
        tanaka.hand.append_tile(discard_tile)
        tanaka.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 1))
        tanaka.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 1))
        tanaka.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 3))
        tanaka.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 4))
        tanaka.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 5))
        tanaka.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 6))
        tanaka.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 7))
        tanaka.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 8))
        self.game.discard_tile(tanaka, discard_tile, False)
        tanaka.hand.update_required()
        tanaka.judge_furiten()
        self.assertEqual(tanaka.b_furiten, True)

    def test_judge_furiten_1(self):
        # [D3][D3][D3][D4][D5][B1][B1][C3][C4][C5][C6][C7][C8]
        self.setup_game()
        tanaka = self.game.set_player("Tanaka")
        tanaka.reset_round()
        doras = []
        underneath_doras = []
        doras.append(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.RED))
        doras.append(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.WHITE))
        doras.append(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.GREEN))
        underneath_doras.append(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.RED))
        underneath_doras.append(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.WHITE))
        underneath_doras.append(gpmjcore.Tile(gpmjcore.Suits.DRAGONS, gpmjcore.Dragons.GREEN))
        self.set_doras(doras, underneath_doras)
        tanaka.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 3))
        tanaka.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 3))
        tanaka.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 3))
        tanaka.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 4))
        tanaka.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.DOTS, 5))
        tanaka.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 1))
        tanaka.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.BAMBOO, 1))
        tanaka.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 3))
        tanaka.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 4))
        tanaka.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 5))
        tanaka.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 6))
        tanaka.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 7))
        tanaka.hand.append_tile(gpmjcore.Tile(gpmjcore.Suits.CHARACTERS, 8))
        tanaka.hand.update_required()
        tanaka.judge_furiten()
        self.assertEqual(tanaka.b_furiten, False)

if __name__ == '__main__':
    unittest.main()

